"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const connect_core_1 = require("@aragon/connect-core");
const connect_ethereum_1 = __importDefault(require("@aragon/connect-ethereum"));
const connect_thegraph_1 = __importDefault(require("@aragon/connect-thegraph"));
function normalizeConnectorConfig(connector) {
    if (Array.isArray(connector)) {
        return [connector[0], connector[1] || {}];
    }
    if (typeof connector === 'string') {
        return [connector, {}];
    }
    return null;
}
function getConnector(connector, network) {
    const normalizedConfig = normalizeConnectorConfig(connector);
    if (normalizedConfig === null) {
        return connector;
    }
    const [name, config] = normalizedConfig;
    if (name === 'json') {
        return new connect_core_1.ConnectorJson(config);
    }
    if (name === 'thegraph') {
        return new connect_thegraph_1.default(network, config);
    }
    if (name === 'ethereum') {
        return new connect_ethereum_1.default(config);
    }
    throw new Error(`Unsupported connector name: ${name}`);
}
function getNetwork(chainId) {
    if (chainId === 1 || !chainId) {
        return {
            chainId: 1,
            name: 'homestead',
            ensAddress: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',
        };
    }
    if (chainId === 4) {
        return {
            chainId: 4,
            name: 'rinkeby',
            ensAddress: '0x98df287b6c145399aaa709692c8d308357bc085d',
        };
    }
    if (chainId === 100) {
        return {
            chainId: 100,
            name: 'xdai',
            ensAddress: '0xaafca6b0c89521752e559650206d7c925fd0e530',
        };
    }
    return null;
}
async function connect(location, connector, { readProvider, chainId } = {}) {
    const network = getNetwork(chainId);
    if (!network) {
        throw new Error(`Invalid chainId provided: ${chainId}`);
    }
    const org = new connect_core_1.Organization(location, getConnector(connector, network), readProvider, network);
    await org._connect();
    return org;
}
exports.default = connect;
//# sourceMappingURL=connect.js.map