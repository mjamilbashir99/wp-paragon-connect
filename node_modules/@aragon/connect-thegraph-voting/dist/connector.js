"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const connect_thegraph_1 = require("@aragon/connect-thegraph");
const queries = __importStar(require("./queries"));
const parsers_1 = require("./parsers");
class VotingConnectorTheGraph extends connect_thegraph_1.GraphQLWrapper {
    async votesForApp(appAddress, first, skip) {
        return this.performQueryWithParser(queries.ALL_VOTES('query'), { appAddress, first, skip }, parsers_1.parseVotes);
    }
    onVotesForApp(appAddress, callback) {
        return this.subscribeToQueryWithParser(queries.ALL_VOTES('subscription'), { appAddress, first: 1000, skip: 0 }, callback, parsers_1.parseVotes);
    }
    async castsForVote(voteId, first, skip) {
        return this.performQueryWithParser(queries.CASTS_FOR_VOTE('query'), { voteId, first, skip }, parsers_1.parseCasts);
    }
    onCastsForVote(voteId, callback) {
        return this.subscribeToQueryWithParser(queries.CASTS_FOR_VOTE('subscription'), { voteId, first: 1000, skip: 0 }, callback, parsers_1.parseCasts);
    }
}
exports.default = VotingConnectorTheGraph;
//# sourceMappingURL=connector.js.map