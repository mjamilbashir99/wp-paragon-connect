"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const queries = __importStar(require("./queries"));
const GraphQLWrapper_1 = __importDefault(require("./core/GraphQLWrapper"));
const parsers_1 = require("./parsers");
function getOrgSubgraphUrl(network) {
    if (network.chainId === 1) {
        return 'https://api.thegraph.com/subgraphs/name/aragon/aragon-mainnet';
    }
    if (network.chainId === 4) {
        return 'https://api.thegraph.com/subgraphs/name/aragon/aragon-rinkeby';
    }
    if (network.chainId === 100) {
        return 'https://api.thegraph.com/subgraphs/name/1hive/aragon-xdai';
    }
    return null;
}
function appFiltersToQueryFilter(appFilters) {
    const queryFilter = {};
    if (appFilters.name) {
        queryFilter.repoName_in = appFilters.name.map(name => name.replace(/\.aragonpm\.eth$/, ''));
    }
    if (appFilters.address) {
        queryFilter.address_in = appFilters.address;
    }
    return queryFilter;
}
class ConnectorTheGraph extends GraphQLWrapper_1.default {
    constructor(network, { verbose = false, orgSubgraphUrl } = {}) {
        const _orgSubgraphUrl = orgSubgraphUrl || getOrgSubgraphUrl(network);
        if (!_orgSubgraphUrl) {
            throw new Error(`The chainId ${network.chainId} is not supported by the TheGraph connector.`);
        }
        super(_orgSubgraphUrl, verbose);
    }
    async rolesForAddress(appAddress) {
        return this.performQueryWithParser(queries.ROLE_BY_APP_ADDRESS('query'), { appAddress: appAddress.toLowerCase() }, parsers_1.parseRoles);
    }
    async permissionsForOrg(orgAddress) {
        return this.performQueryWithParser(queries.ORGANIZATION_PERMISSIONS('query'), { orgAddress: orgAddress.toLowerCase() }, parsers_1.parsePermissions);
    }
    onPermissionsForOrg(orgAddress, callback) {
        return this.subscribeToQueryWithParser(queries.ORGANIZATION_PERMISSIONS('subscription'), { orgAddress: orgAddress.toLowerCase() }, callback, parsers_1.parsePermissions);
    }
    async appByAddress(appAddress) {
        return this.performQueryWithParser(queries.APP_BY_ADDRESS('query'), { appAddress: appAddress.toLowerCase() }, parsers_1.parseApp);
    }
    async appForOrg(orgAddress, filters) {
        const apps = await this.performQueryWithParser(queries.ORGANIZATION_APPS('query'), {
            appFilter: appFiltersToQueryFilter(filters),
            first: 1,
            orgAddress: orgAddress.toLowerCase(),
        }, parsers_1.parseApps);
        return apps[0];
    }
    async appsForOrg(orgAddress, filters) {
        return this.performQueryWithParser(queries.ORGANIZATION_APPS('query'), {
            appFilter: appFiltersToQueryFilter(filters),
            orgAddress: orgAddress.toLowerCase(),
        }, parsers_1.parseApps);
    }
    onAppForOrg(orgAddress, filters, callback) {
        return this.subscribeToQueryWithParser(queries.ORGANIZATION_APPS('subscription'), {
            appFilter: appFiltersToQueryFilter(filters),
            first: 1,
            orgAddress: orgAddress.toLowerCase(),
        }, (apps) => callback(apps[0]), parsers_1.parseApps);
    }
    onAppsForOrg(orgAddress, filters, callback) {
        return this.subscribeToQueryWithParser(queries.ORGANIZATION_APPS('subscription'), {
            appFilter: appFiltersToQueryFilter(filters),
            orgAddress: orgAddress.toLowerCase(),
        }, callback, parsers_1.parseApps);
    }
    async repoForApp(appAddress) {
        return this.performQueryWithParser(queries.REPO_BY_APP_ADDRESS('query'), { appAddress: appAddress.toLowerCase() }, parsers_1.parseRepo);
    }
}
exports.default = ConnectorTheGraph;
//# sourceMappingURL=connector.js.map