import { App, ConnectorInterface, Permission, Repo, Role } from '@aragon/connect-core';
import { AppFilters, Network } from '@aragon/connect-types';
import GraphQLWrapper from './core/GraphQLWrapper';
export declare type ConnectorTheGraphConfig = {
    verbose?: boolean;
    orgSubgraphUrl?: string;
};
export default class ConnectorTheGraph extends GraphQLWrapper implements ConnectorInterface {
    constructor(network: Network, { verbose, orgSubgraphUrl }?: ConnectorTheGraphConfig);
    rolesForAddress(appAddress: string): Promise<Role[]>;
    permissionsForOrg(orgAddress: string): Promise<Permission[]>;
    onPermissionsForOrg(orgAddress: string, callback: Function): {
        unsubscribe: Function;
    };
    appByAddress(appAddress: string): Promise<App>;
    appForOrg(orgAddress: string, filters: AppFilters): Promise<App>;
    appsForOrg(orgAddress: string, filters: AppFilters): Promise<App[]>;
    onAppForOrg(orgAddress: string, filters: AppFilters, callback: Function): {
        unsubscribe: Function;
    };
    onAppsForOrg(orgAddress: string, filters: AppFilters, callback: Function): {
        unsubscribe: Function;
    };
    repoForApp(appAddress: string): Promise<Repo>;
}
//# sourceMappingURL=connector.d.ts.map