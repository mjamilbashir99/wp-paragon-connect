"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.usePermissions = exports.useApps = exports.useApp = exports.useOrganization = exports.Connect = void 0;
const react_1 = __importStar(require("react"));
const connect_1 = require("@aragon/connect");
const ConnectContext = react_1.default.createContext(null);
function Connect({ children, connector, location, options, }) {
    const [org, setOrg] = react_1.useState(null);
    const [orgError, setOrgError] = react_1.useState(null);
    const [orgLoading, setOrgLoading] = react_1.useState(false);
    const cancelOrgLoading = react_1.useRef(null);
    const loadOrg = react_1.useCallback(() => {
        var _a;
        let cancelled = false;
        (_a = cancelOrgLoading.current) === null || _a === void 0 ? void 0 : _a.call(cancelOrgLoading);
        cancelOrgLoading.current = () => {
            cancelled = true;
        };
        setOrg(null);
        setOrgLoading(true);
        const update = async () => {
            const done = (err, org) => {
                if (!cancelled) {
                    setOrgLoading(false);
                    setOrgError(err || null);
                    setOrg(err ? null : org);
                }
            };
            try {
                const org = await connect_1.connect(location, connector, options);
                done(null, org);
            }
            catch (err) {
                done(err, null);
            }
        };
        update();
    }, [location, connector, options]);
    react_1.useEffect(loadOrg, [location, connector, options]);
    const value = react_1.useMemo(() => ({
        org,
        orgStatus: {
            error: orgError,
            loading: orgLoading,
            retry: loadOrg,
        },
    }), [org, orgError, orgLoading, loadOrg]);
    return react_1.createElement(ConnectContext.Provider, { value, children });
}
exports.Connect = Connect;
function useConnectContext() {
    const contextValue = react_1.useContext(ConnectContext);
    if (contextValue === null) {
        throw new Error('The <Connect /> component need to be declared in order to use the provided hooks.');
    }
    return contextValue;
}
function useOrganization() {
    const { org, orgStatus } = useConnectContext();
    return [org, orgStatus];
}
exports.useOrganization = useOrganization;
function useConnectSubscription(callback, initValue) {
    const [data, setData] = react_1.useState(initValue);
    const [loading, setLoading] = react_1.useState(false);
    const { org, orgStatus: { loading: orgLoading }, } = useConnectContext();
    const cancelCb = react_1.useRef(null);
    const subscribe = react_1.useCallback(() => {
        var _a;
        if (!org) {
            // If the org is loading, the subscription is loading as well.
            setLoading(orgLoading);
            setData(initValue);
            return;
        }
        let cancelled = false;
        let handler;
        (_a = cancelCb.current) === null || _a === void 0 ? void 0 : _a.call(cancelCb);
        cancelCb.current = () => {
            var _a;
            cancelled = true;
            (_a = handler === null || handler === void 0 ? void 0 : handler.unsubscribe) === null || _a === void 0 ? void 0 : _a.call(handler);
        };
        setLoading(true);
        handler = callback(org, (data) => {
            if (!cancelled) {
                setData(data);
                setLoading(false);
            }
        });
    }, [org, orgLoading, callback]);
    react_1.useEffect(() => {
        subscribe();
    }, [subscribe]);
    return [data, { error: null, loading, retry: subscribe }];
}
function useApp(appsFilter) {
    const callback = react_1.useCallback((org, onData) => org.onApp(appsFilter, onData), [
        JSON.stringify(appsFilter),
    ]);
    return useConnectSubscription(callback, null);
}
exports.useApp = useApp;
function useApps(appsFilter) {
    const callback = react_1.useCallback((org, onData) => org.onApps(appsFilter, onData), [JSON.stringify(appsFilter)]);
    return useConnectSubscription(callback, []);
}
exports.useApps = useApps;
function usePermissions() {
    const callback = react_1.useCallback((org, onData) => org.onPermissions(onData), []);
    return useConnectSubscription(callback, []);
}
exports.usePermissions = usePermissions;
__exportStar(require("@aragon/connect"), exports);
//# sourceMappingURL=index.js.map