"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _address, _provider, _connected;
Object.defineProperty(exports, "__esModule", { value: true });
const ethers_1 = require("ethers");
const TransactionIntent_1 = __importDefault(require("../transactions/TransactionIntent"));
const params_1 = require("../params");
const misc_1 = require("../utils/misc");
function normalizeAppFilters(filters) {
    var _a;
    if (!filters) {
        return {};
    }
    if (typeof filters === 'string') {
        return filters.startsWith('0x')
            ? { address: [filters] }
            : { name: [filters] };
    }
    if (Array.isArray(filters)) {
        return ((_a = filters[0]) === null || _a === void 0 ? void 0 : _a.startsWith('0x')) ? { address: filters }
            : { name: filters };
    }
    if (filters.address) {
        return { address: misc_1.toArrayEntry(filters.address) };
    }
    if (filters.name) {
        return { name: misc_1.toArrayEntry(filters.name) };
    }
    return {};
}
class Organization {
    constructor(location, connector, provider, network) {
        _address.set(this, void 0);
        _provider.set(this, void 0);
        _connected.set(this, void 0);
        this.location = location;
        const getEthersProvider = () => {
            try {
                return new ethers_1.ethers.providers.Web3Provider(provider, network);
            }
            catch (e) {
                return provider;
            }
        };
        __classPrivateFieldSet(this, _provider, provider
            ? getEthersProvider()
            : network.chainId === 100
                ? new ethers_1.ethers.providers.WebSocketProvider(params_1.XDAI_WSS_ENDPOINT, network)
                : ethers_1.ethers.getDefaultProvider(network));
        this._connector = connector;
        __classPrivateFieldSet(this, _connected, false);
    }
    async _connect() {
        __classPrivateFieldSet(this, _address, ethers_1.ethers.utils.isAddress(this.location)
            ? this.location
            : await __classPrivateFieldGet(this, _provider).resolveName(this.location));
        if (!ethers_1.ethers.utils.isAddress(__classPrivateFieldGet(this, _address) || '')) {
            throw new Error('Please provide a valid address or ENS domain.');
        }
        __classPrivateFieldSet(this, _connected, true);
        return true;
    }
    checkConnected() {
        if (!__classPrivateFieldGet(this, _connected)) {
            throw new Error('Please call ._connect() before using Organization and its methods.');
        }
    }
    get address() {
        this.checkConnected();
        return __classPrivateFieldGet(this, _address) || ''; // The || '' should never happen but TypeScript requires it.
    }
    get provider() {
        this.checkConnected();
        return __classPrivateFieldGet(this, _provider);
    }
    ///////// APPS ///////////
    async app(filters) {
        this.checkConnected();
        return this._connector.appForOrg(this.address, normalizeAppFilters(filters));
    }
    async apps(filters) {
        this.checkConnected();
        return this._connector.appsForOrg(this.address, normalizeAppFilters(filters));
    }
    onApp(filtersOrCallback, callback) {
        this.checkConnected();
        const filters = (callback ? filtersOrCallback : null);
        const _callback = (callback || filtersOrCallback);
        return this._connector.onAppForOrg(this.address, normalizeAppFilters(filters), _callback);
    }
    onApps(filtersOrCallback, callback) {
        this.checkConnected();
        const filters = (callback ? filtersOrCallback : null);
        const _callback = (callback || filtersOrCallback);
        return this._connector.onAppsForOrg(this.address, normalizeAppFilters(filters), _callback);
    }
    ///////// PERMISSIONS ///////////
    async permissions() {
        this.checkConnected();
        return this._connector.permissionsForOrg(this.address);
    }
    onPermissions(callback) {
        this.checkConnected();
        return this._connector.onPermissionsForOrg(this.address, callback);
    }
    ///////// INTENTS ///////////
    appIntent(appAddress, funcName, funcArgs) {
        this.checkConnected();
        return new TransactionIntent_1.default({
            contractAddress: appAddress,
            functionName: funcName,
            functionArgs: funcArgs,
        }, this, __classPrivateFieldGet(this, _provider));
    }
}
exports.default = Organization;
_address = new WeakMap(), _provider = new WeakMap(), _connected = new WeakMap();
//# sourceMappingURL=Organization.js.map