import Repo from './Repo';
import Role from './Role';
import CoreEntity from './CoreEntity';
import { AragonArtifact, AragonManifest, Metadata, Abi, AppIntent } from '../types';
import { ConnectorInterface } from '../connections/ConnectorInterface';
export interface AppData {
    address: string;
    appId: string;
    artifact?: string | null;
    codeAddress: string;
    contentUri?: string | null;
    isForwarder?: boolean | null;
    isUpgradeable?: boolean | null;
    kernelAddress: string;
    manifest?: string | null;
    name?: string;
    registry?: string | null;
    registryAddress: string;
    repoAddress?: string;
    version?: string;
}
export default class App extends CoreEntity {
    #private;
    readonly address: string;
    readonly appId: string;
    readonly codeAddress: string;
    readonly contentUri?: string;
    readonly isForwarder?: boolean;
    readonly isUpgradeable?: boolean;
    readonly kernelAddress: string;
    readonly name?: string;
    readonly registry?: string;
    readonly registryAddress: string;
    readonly repoAddress?: string;
    readonly version?: string;
    constructor(data: AppData, metadata: Metadata, connector: ConnectorInterface);
    static create(data: AppData, connector: ConnectorInterface): Promise<App>;
    repo(): Promise<Repo>;
    roles(): Promise<Role[]>;
    get artifact(): AragonArtifact;
    get manifest(): AragonManifest;
    get abi(): Abi;
    get intents(): AppIntent[];
    get deprecatedIntents(): {
        [version: string]: AppIntent[];
    };
    get appName(): string;
}
//# sourceMappingURL=App.d.ts.map