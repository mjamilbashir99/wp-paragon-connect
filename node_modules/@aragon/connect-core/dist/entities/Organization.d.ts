import { ethers } from 'ethers';
import { AppFiltersParam, Network } from '@aragon/connect-types';
import App from './App';
import TransactionIntent from '../transactions/TransactionIntent';
import Permission from './Permission';
import { ConnectorInterface } from '../connections/ConnectorInterface';
declare type OnAppCallback = (app: App) => void;
declare type OnAppsCallback = (apps: App[]) => void;
declare type SubscriptionHandler = {
    unsubscribe: Function;
};
export default class Organization {
    #private;
    readonly location: string;
    private _connector;
    constructor(location: string, connector: ConnectorInterface, provider: any, network: Network);
    _connect(): Promise<boolean>;
    private checkConnected;
    get address(): string;
    get provider(): ethers.providers.Provider;
    app(filters?: AppFiltersParam): Promise<App>;
    apps(filters?: AppFiltersParam): Promise<App[]>;
    onApp(filtersOrCallback: AppFiltersParam | OnAppCallback, callback?: OnAppCallback): SubscriptionHandler;
    onApps(filtersOrCallback: AppFiltersParam | OnAppsCallback, callback?: OnAppsCallback): SubscriptionHandler;
    permissions(): Promise<Permission[]>;
    onPermissions(callback: Function): SubscriptionHandler;
    appIntent(appAddress: string, funcName: string, funcArgs: any[]): TransactionIntent;
}
export {};
//# sourceMappingURL=Organization.d.ts.map