"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _metadata;
Object.defineProperty(exports, "__esModule", { value: true });
const CoreEntity_1 = __importDefault(require("./CoreEntity"));
const metadata_1 = require("../utils/metadata");
class Repo extends CoreEntity_1.default {
    constructor(data, metadata, connector) {
        super(connector);
        _metadata.set(this, void 0);
        this.address = data.address;
        this.contentUri = data.contentUri || undefined;
        this.name = data.name;
        this.registry = data.registry;
        this.registryAddress = data.registryAddress;
        __classPrivateFieldSet(this, _metadata, metadata);
    }
    static async create(data, connector) {
        const artifact = await metadata_1.resolveMetadata('artifact.json', data.contentUri || undefined, data.artifact);
        const manifest = await metadata_1.resolveManifest(data);
        const metadata = [artifact, manifest];
        return new Repo(data, metadata, connector);
    }
    get artifact() {
        return __classPrivateFieldGet(this, _metadata)[0];
    }
    get manifest() {
        return __classPrivateFieldGet(this, _metadata)[1];
    }
    get roles() {
        return this.artifact.roles;
    }
}
exports.default = Repo;
_metadata = new WeakMap();
//# sourceMappingURL=Repo.js.map