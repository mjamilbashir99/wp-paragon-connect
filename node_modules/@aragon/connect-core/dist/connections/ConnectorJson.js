"use strict";
// TODO: Remove these linting exceptions after implementation.
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/no-empty-function */
/* eslint-disable @typescript-eslint/explicit-function-return-type */
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
};
var _permissions;
Object.defineProperty(exports, "__esModule", { value: true });
class ConnectorJson {
    constructor({ permissions }) {
        _permissions.set(this, void 0);
        __classPrivateFieldSet(this, _permissions, permissions);
    }
    async permissionsForOrg() {
        return __classPrivateFieldGet(this, _permissions);
    }
    onPermissionsForOrg(orgAddress, callback) {
        return {
            unsubscribe: () => { },
        };
    }
    async app(filters) {
        return this.appByAddress('');
    }
    async apps(filters) {
        return [];
    }
    appForOrg(orgAddress) {
        return new Promise(resolve => {
            resolve();
        });
    }
    appsForOrg(orgAddress) {
        return new Promise(resolve => {
            resolve([]);
        });
    }
    onAppForOrg(orgAddress, filters, callback) {
        return {
            unsubscribe: () => { },
        };
    }
    onAppsForOrg(orgAddress, filters, callback) {
        return {
            unsubscribe: () => { },
        };
    }
    repoForApp(appAddress) {
        return new Promise(resolve => {
            resolve();
        });
    }
    appByAddress(appAddress) {
        return new Promise(resolve => {
            resolve();
        });
    }
    rolesForAddress(appAddress) {
        return new Promise(resolve => {
            resolve([]);
        });
    }
}
_permissions = new WeakMap();
exports.default = ConnectorJson;
//# sourceMappingURL=ConnectorJson.js.map