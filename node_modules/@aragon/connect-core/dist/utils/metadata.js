"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveArtifact = exports.resolveManifest = exports.resolveMetadata = exports.fetchMetadata = exports.parseMetadata = void 0;
const ethers_1 = require("ethers");
const index_1 = require("./overrides/index");
const params_1 = require("../params");
function parseMetadata(name, metadata) {
    let parsedMetaData;
    try {
        parsedMetaData = JSON.parse(metadata);
    }
    catch (error) {
        throw new Error(`Can't parse ${name} file, invalid JSON.`);
    }
    return parsedMetaData;
}
exports.parseMetadata = parseMetadata;
async function fetchMetadata(fileName, contentUri) {
    const contentHashRegEx = contentUri.match(/ipfs:(.*)/);
    if (contentHashRegEx) {
        const url = `${params_1.DEFAULT_IPFS_GATEWAY}/ipfs/${contentHashRegEx[1]}/${fileName}`;
        let metadata;
        try {
            metadata = await ethers_1.ethers.utils.fetchJson(url);
        }
        catch (error) {
            throw new Error(`Can't fetch ${url}, failed with error: {error}.`);
        }
        return metadata;
    }
    return {};
}
exports.fetchMetadata = fetchMetadata;
async function resolveMetadata(fileName, contentUri, metadata) {
    if (metadata)
        return parseMetadata(fileName, metadata);
    if (contentUri)
        return fetchMetadata(fileName, contentUri);
    return {};
}
exports.resolveMetadata = resolveMetadata;
async function resolveManifest(data) {
    return resolveMetadata('manifest.json', data.contentUri || undefined, data.manifest);
}
exports.resolveManifest = resolveManifest;
async function resolveArtifact(data) {
    if (index_1.hasAppInfo(data.appId, 'apm')) {
        return index_1.getApmInternalAppInfo(data.appId);
    }
    if (index_1.hasAppInfo(data.appId, 'aragon')) {
        return index_1.getAragonOsInternalAppInfo(data.appId);
    }
    return resolveMetadata('artifact.json', data.contentUri || undefined, data.artifact);
}
exports.resolveArtifact = resolveArtifact;
//# sourceMappingURL=metadata.js.map