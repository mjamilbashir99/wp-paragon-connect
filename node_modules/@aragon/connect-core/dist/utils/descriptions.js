"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.describeScript = exports.describeTransactionPath = exports.describeTransaction = void 0;
const TransactionRequest_1 = __importDefault(require("../transactions/TransactionRequest"));
const decodePath_1 = require("./path/decodePath");
const index_1 = require("./radspec/index");
async function describeTransaction(transaction, apps, provider) {
    if (!transaction.to) {
        throw new Error(`Could not describe transaction: missing 'to'`);
    }
    if (!transaction.data) {
        throw new Error(`Could not describe transaction: missing 'data'`);
    }
    let description, descriptionAnnotated;
    try {
        description = await index_1.tryEvaluatingRadspec(transaction, apps, provider);
        if (description) {
            const processed = await index_1.postprocessRadspecDescription(description, apps);
            descriptionAnnotated = processed.annotatedDescription;
            description = processed.description;
        }
        if (transaction.children) {
            // eslint-disable-next-line @typescript-eslint/no-use-before-define
            transaction.children = await describeTransactionPath(transaction.children, apps, provider);
        }
    }
    catch (err) {
        throw new Error(`Could not describe transaction: ${err}`);
    }
    return new TransactionRequest_1.default({
        ...transaction,
        description,
        descriptionAnnotated,
    });
}
exports.describeTransaction = describeTransaction;
/**
 * Use radspec to create a human-readable description for each transaction in the given `path`
 *
 */
async function describeTransactionPath(path, apps, provider) {
    return Promise.all(path.map(step => describeTransaction(step, apps, provider)));
}
exports.describeTransactionPath = describeTransactionPath;
async function describeScript(script, apps, provider) {
    const path = decodePath_1.decodeTransactionPath(script);
    return describeTransactionPath(path, apps, provider);
}
exports.describeScript = describeScript;
//# sourceMappingURL=descriptions.js.map