"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.tryEvaluatingRadspec = void 0;
const radspec = __importStar(require("radspec"));
const address_1 = require("../address");
const app_1 = require("../app");
/**
 * Attempt to describe intent via radspec.
 */
async function tryEvaluatingRadspec(intent, apps, provider // Decorated intent with description, if one could be made
) {
    const app = apps.find(app => address_1.addressesEqual(app.address, intent.to));
    // If the intent matches an installed app, use only that app to search for a
    // method match, otherwise fallback to searching all installed apps
    const appsToSearch = app ? [app] : apps;
    const foundMethod = appsToSearch.reduce((found, app) => {
        if (found) {
            return found;
        }
        const method = app_1.findAppMethodFromIntent(app, intent);
        if (method) {
            return {
                method,
                // This is not very nice, but some apps don't have ABIs attached to their function
                // declarations and so we have to fall back to using their full app ABI
                // TODO: define a more concrete schema around the artifact.json's `function.abi`
                abi: method.abi ? [method.abi] : app.abi,
            };
        }
    }, undefined);
    const { abi, method } = foundMethod || {};
    let evaluatedNotice;
    if (method && method.notice) {
        try {
            evaluatedNotice = await radspec.evaluate(method.notice, {
                abi,
                transaction: intent,
            }, { provider: provider });
        }
        catch (err) {
            console.error(`Could not evaluate a description for given transaction data: ${intent.data}`, err);
        }
    }
    return evaluatedNotice;
}
exports.tryEvaluatingRadspec = tryEvaluatingRadspec;
var postprocess_1 = require("./postprocess");
Object.defineProperty(exports, "postprocessRadspecDescription", { enumerable: true, get: function () { return postprocess_1.postprocessRadspecDescription; } });
//# sourceMappingURL=index.js.map