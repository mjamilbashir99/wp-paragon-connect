"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildForwardingFeePretransaction = exports.buildPretransaction = exports.createForwarderTransactionBuilder = exports.createDirectTransactionForApp = exports.createDirectTransaction = void 0;
const ethers_1 = require("ethers");
const abis_1 = require("./abis");
const app_1 = require("./app");
async function createDirectTransaction(sender, destination, abi, methodJsonDescription, params) {
    let transactionOptions = {};
    // If an extra parameter has been provided, it is the transaction options if it is an object
    if (methodJsonDescription.inputs.length + 1 === params.length &&
        typeof params[params.length - 1] === 'object') {
        const options = params.pop();
        transactionOptions = { ...transactionOptions, ...options };
    }
    const ethersInterface = new ethers_1.ethers.utils.Interface(abi);
    // The direct transaction we eventually want to perform
    return {
        ...transactionOptions,
        from: sender,
        to: destination,
        data: ethersInterface.encodeFunctionData(methodJsonDescription.name, params),
    };
}
exports.createDirectTransaction = createDirectTransaction;
async function createDirectTransactionForApp(sender, app, methodSignature, params) {
    if (!app) {
        throw new Error(`Could not create transaction due to missing app artifact`);
    }
    const destination = app.address;
    if (!app.abi) {
        throw new Error(`No ABI specified in artifact for ${destination}`);
    }
    const methodJsonDescription = app.abi.find(method => {
        // If the full signature isn't given, just find the first overload declared
        if (!app_1.isFullMethodSignature(methodSignature)) {
            return method.name === methodSignature;
        }
        // Fallback functions don't have inputs in the ABI
        const currentParameterTypes = Array.isArray(method.inputs)
            ? method.inputs.map(({ type }) => type)
            : [];
        const currentMethodSignature = `${method.name}(${currentParameterTypes.join(',')})`;
        return currentMethodSignature === methodSignature;
    });
    if (!methodJsonDescription) {
        throw new Error(`${methodSignature} not found on ABI for ${destination}`);
    }
    return createDirectTransaction(sender, destination, app.abi, methodJsonDescription, params);
}
exports.createDirectTransactionForApp = createDirectTransactionForApp;
function createForwarderTransactionBuilder(sender, directTransaction) {
    const forwarder = new ethers_1.ethers.utils.Interface(abis_1.forwarderAbi);
    return (forwarderAddress, script) => ({
        ...directTransaction,
        from: sender,
        to: forwarderAddress,
        data: forwarder.encodeFunctionData('forward', [script]),
    });
}
exports.createForwarderTransactionBuilder = createForwarderTransactionBuilder;
async function buildPretransaction(transaction, provider) {
    // Token allowance pretransactionn
    const { from, to, token: { address: tokenAddress, value: tokenValue, spender }, } = transaction;
    // Approve the transaction destination unless an spender is passed to approve a different contract
    const approveSpender = spender || to;
    const tokenContract = new ethers_1.ethers.Contract(tokenAddress, abis_1.erc20ABI, provider);
    const balance = await tokenContract.balanceOf(from);
    const tokenValueBN = BigInt(tokenValue);
    if (BigInt(balance) < tokenValueBN) {
        throw new Error(`Balance too low. ${from} balance of ${tokenAddress} token is ${balance} (attempting to send ${tokenValue})`);
    }
    const allowance = await tokenContract.allowance(from, approveSpender);
    const allowanceBN = BigInt(allowance);
    // If allowance is already greater than or equal to amount, there is no need to do an approve transaction
    if (allowanceBN < tokenValueBN) {
        if (allowanceBN > BigInt(0)) {
            // TODO: Actually handle existing approvals (some tokens fail when the current allowance is not 0)
            console.warn(`${from} already approved ${approveSpender}. In some tokens, approval will fail unless the allowance is reset to 0 before re-approving again.`);
        }
        const erc20 = new ethers_1.ethers.utils.Interface(abis_1.erc20ABI);
        return {
            from,
            to: tokenAddress,
            data: erc20.encodeFunctionData('approve', [approveSpender, tokenValue]),
        };
    }
    return undefined;
}
exports.buildPretransaction = buildPretransaction;
async function buildForwardingFeePretransaction(forwardingTransaction, provider) {
    const { to: forwarderAddress, from } = forwardingTransaction;
    const forwarderFee = new ethers_1.ethers.Contract(forwarderAddress, abis_1.forwarderFeeAbi, provider);
    const feeDetails = { amount: BigInt(0), tokenAddress: '' };
    try {
        const overrides = {
            from,
        };
        // Passing the EOA as `msg.sender` to the forwardFee call is useful for use cases where the fee differs relative to the account
        const [tokenAddress, amount] = await forwarderFee.forwardFee(overrides); // forwardFee() returns (address, uint256)
        feeDetails.tokenAddress = tokenAddress;
        feeDetails.amount = BigInt(amount);
    }
    catch (err) {
        // Not all forwarders implement the `forwardFee()` interface
    }
    if (feeDetails.tokenAddress && feeDetails.amount > BigInt(0)) {
        // Needs a token approval pretransaction
        const forwardingTxWithTokenData = {
            ...forwardingTransaction,
            token: {
                address: feeDetails.tokenAddress,
                spender: forwarderAddress,
                value: feeDetails.amount.toString(),
            },
        };
        return buildPretransaction(forwardingTxWithTokenData, provider);
    }
    return undefined;
}
exports.buildForwardingFeePretransaction = buildForwardingFeePretransaction;
//# sourceMappingURL=transactions.js.map