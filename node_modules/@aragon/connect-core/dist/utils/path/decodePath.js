"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodeTransactionPath = void 0;
const callScript_1 = require("../callScript");
const forwarding_1 = require("../forwarding");
/**
 * Decodes an EVM callscript and returns the transaction path it describes.
 *
 * @return An array of Ethereum transactions that describe each step in the path
 */
function decodeTransactionPath(script) {
    // In the future we may support more EVMScripts, but for now let's just assume we're only
    // dealing with call scripts
    if (!callScript_1.isCallScript(script)) {
        throw new Error(`Script could not be decoded: ${script}`);
    }
    const path = callScript_1.decodeCallScript(script);
    return path.reduce((decodeSegments, segment) => {
        const { data } = segment;
        let children;
        if (forwarding_1.isValidForwardCall(data)) {
            const forwardedEvmScript = forwarding_1.parseForwardCall(data);
            try {
                children = decodeTransactionPath(forwardedEvmScript);
                // eslint-disable-next-line no-empty
            }
            catch (err) { }
        }
        return decodeSegments.concat({ ...segment, children });
    }, []);
}
exports.decodeTransactionPath = decodeTransactionPath;
//# sourceMappingURL=decodePath.js.map