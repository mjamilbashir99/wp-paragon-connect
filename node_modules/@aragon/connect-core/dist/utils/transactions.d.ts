import { ethers } from 'ethers';
import { Abi, FunctionFragment } from '../types';
import App from '../entities/App';
export interface Transaction {
    data: string;
    from?: string;
    to: string;
}
export interface TransactionWithTokenData extends Transaction {
    token: {
        address: string;
        value: string;
        spender: string;
    };
}
export declare function createDirectTransaction(sender: string, destination: string, abi: Abi, methodJsonDescription: FunctionFragment, params: any[]): Promise<Transaction>;
export declare function createDirectTransactionForApp(sender: string, app: App, methodSignature: string, params: any[]): Promise<Transaction>;
export declare function createForwarderTransactionBuilder(sender: string, directTransaction: Transaction): Function;
export declare function buildPretransaction(transaction: TransactionWithTokenData, provider: ethers.providers.Provider): Promise<Transaction | undefined>;
export declare function buildForwardingFeePretransaction(forwardingTransaction: Transaction, provider: ethers.providers.Provider): Promise<Transaction | undefined>;
//# sourceMappingURL=transactions.d.ts.map