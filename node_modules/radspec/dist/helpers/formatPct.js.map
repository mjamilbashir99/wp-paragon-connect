{"version":3,"sources":["../../src/helpers/formatPct.js"],"names":["value","base","precision","valueBn","BigNumber","from","baseBn","oneHundred","formattedAmount","mul","type"],"mappings":"sKAGe,IACb;;;;;;;KAQA,MAAOA,KAAP,CAAcC,IAAI,CAAG,qBAAO,EAAP,CAArB,CAAiCC,SAAS,CAAG,CAA7C,GAAmD,MAC3CC,CAAAA,OAAO,CAAGC,kBAAUC,IAAV,CAAeL,KAAf,CADiC,CAE3CM,MAAM,CAAGF,kBAAUC,IAAV,CAAeJ,IAAf,CAFkC,CAI3CM,UAAU,CAAG,qBAAO,CAAP,CAJ8B,CAK3CC,eAAe,CAAG,uBACtBL,OAAO,CAACM,GAAR,CAAYF,UAAZ,CADsB,CAEtBD,MAFsB,EAGfJ,SAHe,CALyB,CAWjD,MAAO,CACLQ,IAAI,CAAE,QADD,CAELV,KAAK,CAAG,GAAEQ,eAAgB,EAFrB,CAIR,C","sourcesContent":["import { BigNumber } from 'ethers'\nimport { formatBN, tenPow } from './lib/formatBN'\n\nexport default () =>\n  /**\n   * Format a percentage amount\n   *\n   * @param {*} value The number to be formatted as a percentage\n   * @param {*} [base=10^18] The number that is considered to be 100% when calculating the percentage\n   * @param {*} [precision=2] The number of decimal places to format to\n   * @return {Promise<radspec/evaluator/TypedValue>}\n   */\n  async (value, base = tenPow(18), precision = 2) => {\n    const valueBn = BigNumber.from(value)\n    const baseBn = BigNumber.from(base)\n\n    const oneHundred = tenPow(2)\n    const formattedAmount = formatBN(\n      valueBn.mul(oneHundred),\n      baseBn,\n      Number(precision)\n    )\n\n    return {\n      type: 'string',\n      value: `${formattedAmount}`\n    }\n  }\n"],"file":"formatPct.js"}