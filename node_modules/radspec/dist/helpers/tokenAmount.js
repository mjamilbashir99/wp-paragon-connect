"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _ethers=require("ethers"),_token=require("./lib/token"),_formatBN=require("./lib/formatBN"),_default=provider=>/**
   * Format token amounts taking decimals into account
   *
   * @param {string} tokenAddress The address of the token
   * @param {*} amount The absolute amount for the token quantity (wei)
   * @param {bool} showSymbol Whether the token symbol will be printed after the amount
   * @param {*} precision The number of decimal places to format to. If set, the precision is always enforced.
   * @return {Promise<radspec/evaluator/TypedValue>}
   */async(tokenAddress,amount,showSymbol=!0,precision)=>{const amountBn=_ethers.BigNumber.from(amount),fixed=!!precision;let decimals,symbol;if(tokenAddress===_token.ETH)decimals=_ethers.BigNumber.from(18),showSymbol&&(symbol="ETH");else{let token=new _ethers.ethers.Contract(tokenAddress,_token.ERC20_SYMBOL_DECIMALS_ABI,provider);if(decimals=_ethers.BigNumber.from((await token.decimals())),showSymbol)try{symbol=(await token.symbol())||""}catch(err){token=new _ethers.ethers.Contract(tokenAddress,_token.ERC20_SYMBOL_BYTES32_ABI,provider),symbol=(await token.symbol())||"",symbol=symbol&&_ethers.ethers.utils.toUtf8String(symbol)}}precision=precision||decimals;const formattedAmount=(0,_formatBN.formatBN)(amountBn,(0,_formatBN.tenPow)(decimals),+precision,fixed);return{type:"string",value:showSymbol?`${formattedAmount} ${symbol}`:formattedAmount}};exports.default=_default;
//# sourceMappingURL=tokenAmount.js.map