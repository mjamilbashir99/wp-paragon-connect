{"version":3,"sources":["../src/index.js"],"names":["evaluate","source","call","userHelpers","options","ethersInterface","ethers","utils","Interface","abi","args","functionFragment","parseTransaction","transaction","parameters","inputs","reduce","input","name","type","value","availableHelpers","defaultHelpers","from","to","data"],"mappings":"mkDAgBA;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4BA,QAASA,CAAAA,QAAT,CAAmBC,MAAnB,CAA2BC,IAA3B,CAAiC,KAAmC,EAApE,CAAwE,IAAvC,CAAEC,WAAW,CAAG,EAAhB,CAAuC,MAAhBC,OAAgB,6DACtE;AADsE,KAEhEC,CAAAA,eAAe,CAAG,GAAIC,gBAAOC,KAAP,CAAaC,SAAjB,CAA2BN,IAAI,CAACO,GAAhC,CAF8C,CAKhE,CAAEC,IAAF,CAAQC,gBAAR,EAA6BN,eAAe,CAACO,gBAAhB,CACjCV,IAAI,CAACW,WAD4B,CALmC,CAShEC,UAAU,CAAGH,gBAAgB,CAACI,MAAjB,CAAwBC,MAAxB,CACjB,CAACF,UAAD,CAAaG,KAAb,kBACE,CAACA,KAAK,CAACC,IAAP,EAAc,CACZC,IAAI,CAAEF,KAAK,CAACE,IADA,CAEZC,KAAK,CAAEV,IAAI,CAACO,KAAK,CAACC,IAAP,CAFC,CADhB,EAKKJ,UALL,CADiB,CAQjB,EARiB,CATmD,CAoBhEO,gBAAgB,kBAAQC,uBAAR,IAA2BnB,WAA3B,CApBgD,CAuBhE,CAAEoB,IAAF,CAAQC,EAAR,CAAYJ,KAAZ,CAAmBK,IAAnB,EAA4BvB,IAAI,CAACW,WAvB+B,CAItE;AAqBA;AACA,MAAO,qBAAYZ,MAAZ,CAAoBa,UAApB,kBACFV,OADE,EAELiB,gBAFK,CAGLE,IAHK,CAILC,EAJK,CAKLJ,KALK,CAMLK,IANK,GAQR,C,aAEczB,Q","sourcesContent":["/**\n * @typedef {Object} Binding\n * @property {string} type The type of the binding (a valid Radspec type)\n * @property {*} value The value of the binding\n */\n/**\n * @typedef {Object.<string, Binding>} Bindings\n */\n\n/**\n * @module radspec\n */\nimport { ethers } from 'ethers'\nimport { defaultHelpers } from './helpers'\nimport { evaluateRaw } from './lib'\n\n/**\n * Evaluate a radspec expression (`source`) for a transaction (`call`)\n *\n * @example\n * import * as radspec from 'radspec'\n *\n * const expression = 'Will multiply `a` by 7 and return `a * 7`.'\n * const call = {\n *   abi: ['function multiply(uint256 a) public view returns(uint256)'],\n *   transaction: {\n *     to: '0x8521742d3f456bd237e312d6e30724960f72517a',\n *     data: '0xc6888fa1000000000000000000000000000000000000000000000000000000000000007a'\n *   }\n * }\n *\n * radspec.evaluate(expression, call)\n *   .then(console.log) // => \"Will multiply 122 by 7 and return 854.\"\n * @param {string} source The radspec expression\n * @param {Object} call The call that determines the bindings for this evaluation\n * @param {Array} call.abi The ABI used to decode the transaction data\n * @param {Object} call.transaction The transaction to decode for this evaluation\n * @param {string} call.transaction.to The destination address for this transaction\n * @param {string} call.transaction.data The transaction data\n * @param {?Object} options An options object\n * @param {?ethers.providers.Provider} options.provider EIP 1193 provider\n * @param {?Object} options.userHelpers User defined helpers\n * @return {Promise<string>} The result of the evaluation\n */\nfunction evaluate (source, call, { userHelpers = {}, ...options } = {}) {\n  // Create ethers interface object\n  const ethersInterface = new ethers.utils.Interface(call.abi)\n\n  // Parse as an ethers TransactionDescription\n  const { args, functionFragment } = ethersInterface.parseTransaction(\n    call.transaction\n  )\n\n  const parameters = functionFragment.inputs.reduce(\n    (parameters, input) => ({\n      [input.name]: {\n        type: input.type,\n        value: args[input.name]\n      },\n      ...parameters\n    }),\n    {}\n  )\n\n  const availableHelpers = { ...defaultHelpers, ...userHelpers }\n\n  // Get additional options\n  const { from, to, value, data } = call.transaction\n\n  // Evaluate expression with bindings from the transaction data\n  return evaluateRaw(source, parameters, {\n    ...options,\n    availableHelpers,\n    from,\n    to,\n    value,\n    data\n  })\n}\n\nexport default evaluate\nexport { evaluate, evaluateRaw }\n\n// Re-export some commonly used inner functionality\nexport { parse } from './parser'\nexport { scan } from './scanner'\n"],"file":"index.js"}