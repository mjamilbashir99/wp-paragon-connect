{"id":"node_modules/@aragon/connect-core/dist/utils/callScript.js","dependencies":[{"name":"C:\\xampp\\htdocs\\test_wp\\node_modules\\@aragon\\connect-core\\dist\\utils\\callScript.js.map","includedInParent":true,"mtime":1594248789000},{"name":"C:\\xampp\\htdocs\\test_wp\\package.json","includedInParent":true,"mtime":1595855422975},{"name":"C:\\xampp\\htdocs\\test_wp\\node_modules\\@aragon\\connect-core\\package.json","includedInParent":true,"mtime":1595838173215},{"name":"ethers","loc":{"line":4,"column":25},"parent":"C:\\xampp\\htdocs\\test_wp\\node_modules\\@aragon\\connect-core\\dist\\utils\\callScript.js","resolved":"C:\\xampp\\htdocs\\test_wp\\node_modules\\ethers\\dist\\ethers.umd.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.encodeCallScript = exports.decodeCallScript = exports.isCallScript = exports.CALLSCRIPT_ID = void 0;\nconst ethers_1 = require(\"ethers\");\nexports.CALLSCRIPT_ID = '0x00000001';\nfunction decodeSegment(script) {\n    // Get address\n    const to = `0x${script.substring(0, 40)}`;\n    script = script.substring(40);\n    // Get data\n    const dataLength = parseInt(`0x${script.substring(0, 8)}`, 16) * 2;\n    script = script.substring(8);\n    const data = `0x${script.substring(0, dataLength)}`;\n    // Return rest of script for processing\n    script = script.substring(dataLength);\n    return {\n        segment: {\n            to,\n            data,\n        },\n        scriptLeft: script,\n    };\n}\n/**\n * Checks whether a EVMScript bytes string is a call script.\n */\nfunction isCallScript(script) {\n    // Get script identifier (0x prefix + bytes4)\n    const scriptId = script.substring(0, 10);\n    return scriptId === exports.CALLSCRIPT_ID;\n}\nexports.isCallScript = isCallScript;\n/**\n * Decode a call script bytes string into its actions.\n *\n * Will return an array containing objects with:\n *\n *  - `to`: to address\n *  - `data`: call data\n *\n */\nfunction decodeCallScript(script) {\n    if (!isCallScript(script)) {\n        throw new Error(`Not a call script: ${script}`);\n    }\n    let scriptData = script.substring(10);\n    const segments = [];\n    while (scriptData.length > 0) {\n        const { segment, scriptLeft } = decodeSegment(scriptData);\n        segments.push(segment);\n        scriptData = scriptLeft;\n    }\n    return segments;\n}\nexports.decodeCallScript = decodeCallScript;\n/**\n * Encode a call script\n *\n * Example:\n *\n * input:\n * [\n *  { to: 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, data: 0x11111111 },\n *  { to: 0xbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb, data: 0x2222222222 }\n * ]\n *\n * output:\n * 0x00000001\n *   aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0000000411111111\n *   bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb000000052222222222\n *\n *\n * @param {Array<CallScriptAction>} actions\n * @returns {string}\n */\nfunction encodeCallScript(actions) {\n    return actions.reduce((script, { to, data }) => {\n        const address = ethers_1.ethers.utils.defaultAbiCoder.encode(['address'], [to]);\n        const dataLength = ethers_1.ethers.utils.defaultAbiCoder.encode(['uint256'], [(data.length - 2) / 2]);\n        return script + address.slice(26) + dataLength.slice(58) + data.slice(2);\n    }, exports.CALLSCRIPT_ID);\n}\nexports.encodeCallScript = encodeCallScript;\n"},"sourceMaps":{"js":{"version":3,"file":"callScript.js","sourceRoot":"","sources":["../../src/utils/callScript.ts"],"names":[],"mappings":";;;AAAA,mCAA+B;AAElB,QAAA,aAAa,GAAG,YAAY,CAAA;AAYzC,SAAS,aAAa,CAAC,MAAc;IACnC,cAAc;IACd,MAAM,EAAE,GAAG,KAAK,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,CAAA;IACzC,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC,CAAA;IAE7B,WAAW;IACX,MAAM,UAAU,GAAG,QAAQ,CAAC,KAAK,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,CAAC,CAAA;IAClE,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAA;IAC5B,MAAM,IAAI,GAAG,KAAK,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,UAAU,CAAC,EAAE,CAAA;IAEnD,uCAAuC;IACvC,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,CAAA;IAErC,OAAO;QACL,OAAO,EAAE;YACP,EAAE;YACF,IAAI;SACL;QACD,UAAU,EAAE,MAAM;KACnB,CAAA;AACH,CAAC;AAED;;GAEG;AACH,SAAgB,YAAY,CAAC,MAAc;IACzC,6CAA6C;IAC7C,MAAM,QAAQ,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,CAAA;IACxC,OAAO,QAAQ,KAAK,qBAAa,CAAA;AACnC,CAAC;AAJD,oCAIC;AAED;;;;;;;;GAQG;AACH,SAAgB,gBAAgB,CAAC,MAAc;IAC7C,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE;QACzB,MAAM,IAAI,KAAK,CAAC,sBAAsB,MAAM,EAAE,CAAC,CAAA;KAChD;IAED,IAAI,UAAU,GAAG,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC,CAAA;IACrC,MAAM,QAAQ,GAAG,EAAE,CAAA;IAEnB,OAAO,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;QAC5B,MAAM,EAAE,OAAO,EAAE,UAAU,EAAE,GAAG,aAAa,CAAC,UAAU,CAAC,CAAA;QACzD,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;QACtB,UAAU,GAAG,UAAU,CAAA;KACxB;IACD,OAAO,QAAQ,CAAA;AACjB,CAAC;AAdD,4CAcC;AAED;;;;;;;;;;;;;;;;;;;GAmBG;AACH,SAAgB,gBAAgB,CAAC,OAA2B;IAC1D,OAAO,OAAO,CAAC,MAAM,CAAC,CAAC,MAAc,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE;QACrD,MAAM,OAAO,GAAG,eAAM,CAAC,KAAK,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAA;QACtE,MAAM,UAAU,GAAG,eAAM,CAAC,KAAK,CAAC,eAAe,CAAC,MAAM,CACpD,CAAC,SAAS,CAAC,EACX,CAAC,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CACxB,CAAA;QAED,OAAO,MAAM,GAAG,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;IAC1E,CAAC,EAAE,qBAAa,CAAC,CAAA;AACnB,CAAC;AAVD,4CAUC","sourcesContent":[null]}},"error":null,"hash":"5126faf325275cd44ddfbc95df99f380","cacheData":{"env":{}}}