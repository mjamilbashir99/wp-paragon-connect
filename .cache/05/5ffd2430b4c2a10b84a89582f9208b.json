{"id":"node_modules/@urql/core/dist/urql-core.mjs","dependencies":[{"name":"C:\\xampp\\htdocs\\aragon-connect\\node_modules\\@urql\\core\\dist\\urql-core.mjs.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\xampp\\htdocs\\aragon-connect\\package.json","includedInParent":true,"mtime":1595855422975},{"name":"C:\\xampp\\htdocs\\aragon-connect\\node_modules\\@urql\\core\\package.json","includedInParent":true,"mtime":1595838173231},{"name":"graphql/language/visitor","loc":{"line":579,"column":22},"parent":"C:\\xampp\\htdocs\\aragon-connect\\node_modules\\@urql\\core\\dist\\urql-core.mjs","resolved":"C:\\xampp\\htdocs\\aragon-connect\\node_modules\\graphql\\language\\visitor.mjs"},{"name":"graphql/language/kinds","loc":{"line":581,"column":21},"parent":"C:\\xampp\\htdocs\\aragon-connect\\node_modules\\@urql\\core\\dist\\urql-core.mjs","resolved":"C:\\xampp\\htdocs\\aragon-connect\\node_modules\\graphql\\language\\kinds.mjs"},{"name":"graphql/language/printer","loc":{"line":583,"column":22},"parent":"C:\\xampp\\htdocs\\aragon-connect\\node_modules\\@urql\\core\\dist\\urql-core.mjs","resolved":"C:\\xampp\\htdocs\\aragon-connect\\node_modules\\graphql\\language\\printer.mjs"},{"name":"graphql/language/parser","loc":{"line":585,"column":22},"parent":"C:\\xampp\\htdocs\\aragon-connect\\node_modules\\@urql\\core\\dist\\urql-core.mjs","resolved":"C:\\xampp\\htdocs\\aragon-connect\\node_modules\\graphql\\language\\parser.mjs"},{"name":"wonka","loc":{"line":587,"column":191},"parent":"C:\\xampp\\htdocs\\aragon-connect\\node_modules\\@urql\\core\\dist\\urql-core.mjs","resolved":"C:\\xampp\\htdocs\\aragon-connect\\node_modules\\wonka\\dist\\wonka.mjs"},{"name":"./9ab84a44.mjs","loc":{"line":591,"column":99},"parent":"C:\\xampp\\htdocs\\aragon-connect\\node_modules\\@urql\\core\\dist\\urql-core.mjs","resolved":"C:\\xampp\\htdocs\\aragon-connect\\node_modules\\@urql\\core\\dist\\9ab84a44.mjs"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Client = Z;\nexports.cacheExchange = K;\nexports.composeExchanges = X;\nexports.createClient = createClient;\nexports.createRequest = r;\nexports.debugExchange = debugExchange;\nexports.dedupExchange = Q;\nexports.fetchExchange = T;\nexports.formatDocument = y;\nexports.maskTypename = A;\nexports.ssrExchange = ssrExchange;\nexports.subscriptionExchange = subscriptionExchange;\nObject.defineProperty(exports, \"CombinedError\", {\n  enumerable: true,\n  get: function () {\n    return _ab84a.C;\n  }\n});\nObject.defineProperty(exports, \"makeErrorResult\", {\n  enumerable: true,\n  get: function () {\n    return _ab84a.a;\n  }\n});\nObject.defineProperty(exports, \"makeResult\", {\n  enumerable: true,\n  get: function () {\n    return _ab84a.m;\n  }\n});\nObject.defineProperty(exports, \"stringifyVariables\", {\n  enumerable: true,\n  get: function () {\n    return _ab84a.s;\n  }\n});\nexports.fallbackExchangeIO = exports.defaultExchanges = void 0;\n\nvar _visitor = require(\"graphql/language/visitor\");\n\nvar _kinds = require(\"graphql/language/kinds\");\n\nvar _printer = require(\"graphql/language/printer\");\n\nvar _parser = require(\"graphql/language/parser\");\n\nvar _wonka = require(\"wonka\");\n\nvar _ab84a = require(\"./9ab84a44.mjs\");\n\nfunction n(a, b) {\n  a |= 0;\n\n  for (var c = 0, d = 0 | b.length; c < d; c++) {\n    a = (a << 5) + a + b.charCodeAt(c);\n  }\n\n  return a;\n}\n\nfunction r(a, b) {\n  if (\"string\" == typeof a) {\n    var c = n(5381, a.replace(/[\\s,]+/g, \" \").trim()) >>> 0;\n    a = void 0 !== q[c] ? q[c] : (0, _parser.parse)(a);\n  } else {\n    void 0 !== a.__key ? c = a.__key : (c = n(5381, (0, _printer.print)(a).replace(/[\\s,]+/g, \" \").trim()) >>> 0, a = void 0 !== q[c] ? q[c] : a);\n  }\n\n  q[c] = a;\n  a.__key = c;\n  return {\n    key: b ? n(c, (0, _ab84a.s)(b)) >>> 0 : c,\n    query: a,\n    variables: b || {}\n  };\n}\n\nfunction t(a, b) {\n  return (0, _ab84a._)({}, a, {\n    context: (0, _ab84a._)({}, a.context, {\n      meta: (0, _ab84a._)({}, a.context.meta, b)\n    })\n  });\n}\n\nfunction u(a, b) {\n  void 0 === b && (b = []);\n\n  if (Array.isArray(a)) {\n    a.forEach(function c(a) {\n      u(a, b);\n    });\n  } else if (\"object\" == typeof a && null !== a) {\n    for (var d in a) {\n      \"__typename\" === d && \"string\" == typeof a[d] ? b.push(a[d]) : u(a[d], b);\n    }\n  }\n\n  return b;\n}\n\nfunction v(a, b, c) {\n  return c.indexOf(a) === b;\n}\n\nfunction w(a) {\n  return a.kind === _kinds.Kind.FIELD && \"__typename\" === a.name.value;\n}\n\nfunction x(a) {\n  if (a.selectionSet && !a.selectionSet.selections.some(w)) {\n    return (0, _ab84a._)({}, a, {\n      selectionSet: (0, _ab84a._)({}, a.selectionSet, {\n        selections: a.selectionSet.selections.concat([{\n          kind: _kinds.Kind.FIELD,\n          name: {\n            kind: _kinds.Kind.NAME,\n            value: \"__typename\"\n          }\n        }])\n      })\n    });\n  }\n}\n\nfunction y(a) {\n  var b = (0, _visitor.visit)(a, {\n    Field: x,\n    InlineFragment: x\n  });\n  b.__key = a.__key;\n  return b;\n}\n\nfunction A(a) {\n  return a && \"object\" == typeof a ? Object.keys(a).reduce(function (b, c) {\n    var d = a[c];\n    \"__typename\" === c ? Object.defineProperty(b, \"__typename\", {\n      enumerable: !1,\n      value: d\n    }) : Array.isArray(d) ? b[c] = d.map(A) : b[c] = d && \"object\" == typeof d && \"__typename\" in d ? A(d) : d;\n    return b;\n  }, {}) : a;\n}\n\nfunction B(a) {\n  a.toPromise = function () {\n    return (0, _wonka.toPromise)((0, _wonka.take)(1)(a));\n  };\n\n  return a;\n}\n\nfunction C() {}\n\nfunction D(a) {\n  return \"subscription\" !== (a = a.operationName) && \"query\" !== a;\n}\n\nfunction E(a) {\n  return a.path || a.extensions ? {\n    message: a.message,\n    path: a.path,\n    extensions: a.extensions\n  } : a.message;\n}\n\nfunction F(a) {\n  return \"mutation\" !== (a = a.operationName) && \"query\" !== a;\n}\n\nfunction G(a) {\n  return (0, _ab84a._)({}, a, {\n    query: y(a.query)\n  });\n}\n\nfunction H(a) {\n  return \"query\" !== a.operationName || \"cache-only\" !== a.context.requestPolicy;\n}\n\nfunction I(a) {\n  return t(a, {\n    cacheOutcome: \"miss\"\n  });\n}\n\nfunction J(a) {\n  return F(a);\n}\n\nfunction K(a) {\n  function b(a) {\n    var b = a.context.requestPolicy;\n    return \"query\" === a.operationName && \"network-only\" !== b && (\"cache-only\" === b || h.has(a.key));\n  }\n\n  function c(a) {\n    var c = h.get(a.key);\n    \"production\" !== \"development\" && g((0, _ab84a._)({}, {\n      operation: a\n    }, c ? {\n      type: \"cacheHit\",\n      message: \"The result was successfully retried from the cache\"\n    } : {\n      type: \"cacheMiss\",\n      message: \"The result could not be retrieved from the cache\"\n    }));\n    c = (0, _ab84a._)({}, c, {\n      operation: t(a, {\n        cacheOutcome: c ? \"hit\" : \"miss\"\n      })\n    });\n    \"cache-and-network\" === a.context.requestPolicy && (c.stale = !0, L(m, a));\n    return c;\n  }\n\n  function d(a) {\n    return !F(a) && b(a);\n  }\n\n  function e(a) {\n    a.operation && \"mutation\" === a.operation.operationName ? k(a) : a.operation && \"query\" === a.operation.operationName && l(a);\n  }\n\n  function f(a) {\n    return !F(a) && !b(a);\n  }\n\n  var k,\n      l,\n      p = a.forward,\n      m = a.client,\n      g = a.dispatchDebug,\n      h = new Map();\n  a = Object.create(null);\n  k = function M(a, b, c, d) {\n    function e(b) {\n      if (a.has(b)) {\n        var d = a.get(b).operation;\n        a.delete(b);\n        L(c, d);\n      }\n    }\n\n    return function (a) {\n      function c(a) {\n        f.add(a);\n      }\n\n      var f = new Set(),\n          g = a.operation.context.additionalTypenames;\n      g = u(a.data).filter(v).concat(g || []);\n      \"production\" !== \"development\" && d({\n        type: \"cacheInvalidation\",\n        message: \"The following typenames have been invalidated: \" + g,\n        operation: a.operation,\n        data: {\n          typenames: g,\n          response: a\n        },\n        source: \"cacheExchange\"\n      });\n      g.forEach(function (a) {\n        (a = b[a] || (b[a] = new Set())).forEach(c);\n        a.clear();\n      });\n      f.forEach(e);\n    };\n  }(h, a, m, g), l = function N(a, b) {\n    return function (c) {\n      var d = c.operation,\n          e = c.data,\n          f = d.context.additionalTypenames;\n      null != e && (a.set(d.key, {\n        operation: d,\n        data: e,\n        error: c.error\n      }), u(c.data).filter(v).concat(f || []).forEach(function (a) {\n        (b[a] || (b[a] = new Set())).add(d.key);\n      }));\n    };\n  }(h, a);\n  return function (a) {\n    var b = (0, _wonka.share)(a);\n    a = (0, _wonka.map)(c)((0, _wonka.filter)(d)(b));\n    b = (0, _wonka.tap)(e)(p((0, _wonka.filter)(H)((0, _wonka.map)(I)((0, _wonka.merge)([(0, _wonka.map)(G)((0, _wonka.filter)(f)(b)), (0, _wonka.filter)(J)(b)])))));\n    return (0, _wonka.merge)([a, b]);\n  };\n}\n\nfunction L(a, b) {\n  return a.reexecuteOperation((0, _ab84a._)({}, b, {\n    context: (0, _ab84a._)({}, b.context, {\n      requestPolicy: \"network-only\"\n    })\n  }));\n}\n\nfunction O(a) {\n  return console.log(\"[Exchange debug]: Completed operation: \", a);\n}\n\nfunction P(a) {\n  return console.log(\"[Exchange debug]: Incoming operation: \", a);\n}\n\nfunction Q(a) {\n  function b(a) {\n    f.delete(a.operation.key);\n  }\n\n  function c(a) {\n    var c = a.key,\n        b = a.operationName;\n\n    if (\"teardown\" === b) {\n      return f.delete(c), !0;\n    }\n\n    if (\"query\" !== b && \"subscription\" !== b) {\n      return !0;\n    }\n\n    b = f.has(c);\n    f.add(c);\n    b && \"production\" !== \"development\" && e({\n      type: \"dedup\",\n      message: \"An operation has been deduped.\",\n      operation: a,\n      source: \"dedupExchange\"\n    });\n    return !b;\n  }\n\n  var d = a.forward,\n      e = a.dispatchDebug,\n      f = new Set();\n  return function (a) {\n    a = (0, _wonka.filter)(c)(a);\n    return (0, _wonka.tap)(b)(d(a));\n  };\n}\n\nfunction R(a) {\n  return \"query\" === a.operationName || \"mutation\" === a.operationName;\n}\n\nfunction S(a) {\n  return \"query\" !== a.operationName && \"mutation\" !== a.operationName;\n}\n\nfunction T(a) {\n  var b = a.forward,\n      c = a.dispatchDebug;\n  return function (a) {\n    var f,\n        d = (0, _wonka.share)(a);\n    a = (0, _wonka.mergeMap)(function (a) {\n      var b = a.key,\n          g = (0, _wonka.filter)(function (a) {\n        return \"teardown\" === a.operationName && a.key === b;\n      })(d),\n          e = (0, _ab84a.b)(a),\n          f = (0, _ab84a.c)(a, e),\n          l = (0, _ab84a.d)(a, e);\n      \"production\" !== \"development\" && c({\n        type: \"fetchRequest\",\n        message: \"A fetch request is being executed.\",\n        operation: a,\n        data: {\n          url: f,\n          fetchOptions: l\n        },\n        source: \"fetchExchange\"\n      });\n      return (0, _wonka.onPush)(function (b) {\n        var d = b.data ? void 0 : b.error;\n        \"production\" !== \"development\" && c({\n          type: d ? \"fetchError\" : \"fetchSuccess\",\n          message: \"A \" + (d ? \"failed\" : \"successful\") + \" fetch response has been returned.\",\n          operation: a,\n          data: {\n            url: f,\n            fetchOptions: l,\n            value: d || b\n          },\n          source: \"fetchExchange\"\n        });\n      })((0, _wonka.takeUntil)(g)((0, _ab84a.e)(a, f, l)));\n    })((0, _wonka.filter)(R)(d));\n    f = b((0, _wonka.filter)(S)(d));\n    return (0, _wonka.merge)([a, f]);\n  };\n}\n\nfunction U() {\n  return !1;\n}\n\nfunction V(a) {\n  function b(a) {\n    if (\"teardown\" !== a.operationName && \"production\" !== \"development\") {\n      var b = 'No exchange has handled operations of type \"' + a.operationName + \"\\\". Check whether you've added an exchange responsible for these operations.\";\n      \"production\" !== \"development\" && c({\n        type: \"fallbackCatch\",\n        message: b,\n        operation: a,\n        source: \"fallbackExchange\"\n      });\n      console.warn(b);\n    }\n  }\n\n  var c = a.dispatchDebug;\n  return function (a) {\n    return (0, _wonka.filter)(U)((0, _wonka.tap)(b)(a));\n  };\n}\n\nfunction X(a) {\n  return function (b) {\n    var c = b.client,\n        d = b.dispatchDebug;\n    return a.reduceRight(function (a, b) {\n      return b({\n        client: c,\n        forward: a,\n        dispatchDebug: function (a) {\n          \"production\" !== \"development\" && d((0, _ab84a._)({}, {\n            timestamp: Date.now(),\n            source: b.name\n          }, a));\n        }\n      });\n    }, b.forward);\n  };\n}\n\nfunction Z(a) {\n  var d,\n      e,\n      f,\n      p,\n      m,\n      c = this;\n  this.activeOperations = Object.create(null);\n  this.queue = [];\n\n  this.createOperationContext = function (a) {\n    return (0, _ab84a._)({}, {\n      url: c.url,\n      fetchOptions: c.fetchOptions,\n      fetch: c.fetch,\n      preferGetMethod: c.preferGetMethod\n    }, a, {\n      requestPolicy: (a || {}).requestPolicy || c.requestPolicy\n    });\n  };\n\n  this.createRequestOperation = function (a, b, d) {\n    return {\n      key: b.key,\n      query: b.query,\n      variables: b.variables,\n      operationName: a,\n      context: c.createOperationContext(d)\n    };\n  };\n\n  this.executeQuery = function (a, b) {\n    a = c.createRequestOperation(\"query\", a, b);\n    var l = c.executeRequestOperation(a);\n    return (a = a.context.pollInterval) ? (0, _wonka.switchMap)(function d() {\n      return l;\n    })((0, _wonka.merge)([(0, _wonka.fromValue)(0), (0, _wonka.interval)(a)])) : l;\n  };\n\n  this.executeSubscription = function (a, b) {\n    a = c.createRequestOperation(\"subscription\", a, b);\n    return c.executeRequestOperation(a);\n  };\n\n  this.executeMutation = function (a, b) {\n    a = c.createRequestOperation(\"mutation\", a, b);\n    return c.executeRequestOperation(a);\n  };\n\n  if (\"production\" !== \"development\" && !a.url) {\n    throw Error(\"You are creating an urql-client without a url.\");\n  }\n\n  d = C;\n\n  if (\"production\" !== \"development\") {\n    e = (d = (0, _wonka.makeSubject)()).next, f = d.source;\n\n    this.subscribeToDebugTarget = function b(a) {\n      return (0, _wonka.subscribe)(a)(f);\n    };\n\n    d = e;\n  }\n\n  this.url = a.url;\n  this.fetchOptions = a.fetchOptions;\n  this.fetch = a.fetch;\n  this.suspense = !!a.suspense;\n  this.requestPolicy = a.requestPolicy || \"cache-first\";\n  this.preferGetMethod = !!a.preferGetMethod;\n  this.maskTypename = !!a.maskTypename;\n  e = (0, _wonka.makeSubject)();\n  p = e.next;\n  this.operations$ = e.source;\n  m = !1;\n\n  this.dispatchOperation = function (a) {\n    m = !0;\n\n    for (a && p(a); a = c.queue.shift();) {\n      p(a);\n    }\n\n    m = !1;\n  };\n\n  this.reexecuteOperation = function (a) {\n    0 < (c.activeOperations[a.key] || 0) && (c.queue.push(a), m || Promise.resolve().then(c.dispatchOperation));\n  };\n\n  a = X(void 0 !== a.exchanges ? a.exchanges : Y);\n  this.results$ = (0, _wonka.share)(a({\n    client: this,\n    dispatchDebug: d,\n    forward: V({\n      dispatchDebug: d\n    })\n  })(this.operations$));\n  (0, _wonka.publish)(this.results$);\n}\n\nfunction aa(a) {\n  a.data = A(a.data);\n  return a;\n}\n\nfunction createClient(a) {\n  return new Z(a);\n}\n\nfunction debugExchange(a) {\n  var d = a.forward;\n  return \"production\" === \"development\" ? function b(a) {\n    return d(a);\n  } : function c(a) {\n    return (0, _wonka.tap)(O)(d((0, _wonka.tap)(P)(a)));\n  };\n}\n\nfunction ssrExchange(a) {\n  function b(b) {\n    var c = b.client,\n        l = b.forward;\n    return function (b) {\n      var e = a && \"boolean\" == typeof a.isClient ? !!a.isClient : !c.suspense,\n          k = (0, _wonka.share)(b);\n      b = l((0, _wonka.filter)(f)(k));\n      k = (0, _wonka.map)(p)((0, _wonka.filter)(m)(k));\n      e ? k = (0, _wonka.tap)(d)(k) : b = (0, _wonka.tap)(g)(b);\n      return (0, _wonka.merge)([b, k]);\n    };\n  }\n\n  function c(a) {\n    return !D(a) && void 0 !== h[a.key];\n  }\n\n  function d(a) {\n    k.push(a.operation.key);\n    1 === k.length && Promise.resolve().then(e);\n  }\n\n  function e() {\n    for (var a; a = k.shift();) {\n      delete h[a];\n    }\n  }\n\n  function f(a) {\n    return !c(a);\n  }\n\n  function p(a) {\n    var b = h[a.key],\n        c = b.error;\n    return {\n      operation: a,\n      data: b.data,\n      extensions: void 0,\n      error: c ? new _ab84a.C({\n        networkError: c.networkError ? Error(c.networkError) : void 0,\n        graphQLErrors: c.graphQLErrors && c.graphQLErrors.length ? c.graphQLErrors : void 0\n      }) : void 0\n    };\n  }\n\n  function m(a) {\n    return c(a);\n  }\n\n  function g(a) {\n    var c,\n        b = a.operation;\n\n    if (!D(b)) {\n      c = a.error;\n      a = {\n        data: a.data,\n        error: void 0\n      };\n      c && (a.error = {\n        graphQLErrors: c.graphQLErrors.map(E),\n        networkError: c.networkError ? \"\" + c.networkError : void 0\n      });\n      h[b.key] = a;\n    }\n  }\n\n  var h = {},\n      k = [];\n\n  b.restoreData = function (a) {\n    return (0, _ab84a._)(h, a);\n  };\n\n  b.extractData = function () {\n    return (0, _ab84a._)({}, h);\n  };\n\n  a && a.initialState && b.restoreData(a.initialState);\n  return b;\n}\n\nfunction subscriptionExchange(a) {\n  function b(a) {\n    return \"subscription\" === (a = a.operationName) || !!d && (\"query\" === a || \"mutation\" === a);\n  }\n\n  var c = a.forwardSubscription,\n      d = a.enableAllOperations;\n  return function (a) {\n    function d(a) {\n      var b = c({\n        key: a.key.toString(36),\n        query: (0, _printer.print)(a.query),\n        variables: a.variables,\n        context: (0, _ab84a._)({}, a.context)\n      });\n      return (0, _wonka.make)(function (c) {\n        function d(b) {\n          return k((0, _ab84a.m)(a, b));\n        }\n\n        function e(b) {\n          return k((0, _ab84a.a)(a, b));\n        }\n\n        function f() {\n          g || (g = !0, \"subscription\" === a.operationName && m.reexecuteOperation((0, _ab84a._)({}, a, {\n            operationName: \"teardown\"\n          })), h());\n        }\n\n        var l,\n            k = c.next,\n            h = c.complete,\n            g = !1;\n        Promise.resolve().then(function () {\n          g || (l = b.subscribe({\n            next: d,\n            error: e,\n            complete: f\n          }));\n        });\n        return function () {\n          g = !0;\n          l && l.unsubscribe();\n        };\n      });\n    }\n\n    function e(a) {\n      return !h(a);\n    }\n\n    var m = a.client,\n        g = a.forward,\n        h = b;\n    return function (a) {\n      var c,\n          b = (0, _wonka.share)(a);\n      a = (0, _wonka.mergeMap)(function (a) {\n        var c = a.key,\n            e = (0, _wonka.filter)(function (a) {\n          return \"teardown\" === a.operationName && a.key === c;\n        })(b);\n        return (0, _wonka.takeUntil)(e)(d(a));\n      })((0, _wonka.filter)(h)(b));\n      c = g((0, _wonka.filter)(e)(b));\n      return (0, _wonka.merge)([a, c]);\n    };\n  };\n}\n\nvar q, W, Y;\nexports.defaultExchanges = Y;\nexports.fallbackExchangeIO = W;\nq = Object.create(null);\nexports.fallbackExchangeIO = W = V({\n  dispatchDebug: C\n});\nexports.defaultExchanges = Y = [Q, K, T];\n\nZ.prototype.onOperationStart = function (a) {\n  var b = a.key;\n  this.activeOperations[b] = (this.activeOperations[b] || 0) + 1;\n  this.dispatchOperation(a);\n};\n\nZ.prototype.onOperationEnd = function (a) {\n  var b = a.key,\n      c = this.activeOperations[b] || 0;\n  0 >= (this.activeOperations[b] = 0 >= c ? 0 : c - 1) && this.dispatchOperation((0, _ab84a._)({}, a, {\n    operationName: \"teardown\"\n  }));\n};\n\nZ.prototype.executeRequestOperation = function (a) {\n  var p,\n      c = this,\n      d = a.key,\n      e = a.operationName,\n      f = (0, _wonka.filter)(function (a) {\n    return a.operation.key === d;\n  })(this.results$);\n  this.maskTypename && (f = (0, _wonka.map)(aa)(f));\n\n  if (\"mutation\" === e) {\n    return (0, _wonka.take)(1)((0, _wonka.onStart)(function b() {\n      return c.dispatchOperation(a);\n    })(f));\n  }\n\n  p = (0, _wonka.filter)(function (a) {\n    return \"teardown\" === a.operationName && a.key === d;\n  })(this.operations$);\n  f = (0, _wonka.onEnd)(function () {\n    c.onOperationEnd(a);\n  })((0, _wonka.onStart)(function () {\n    c.onOperationStart(a);\n  })((0, _wonka.takeUntil)(p)(f)));\n  return !1 !== a.context.suspense && this.suspense && \"query\" === e ? function z(a) {\n    return function (b) {\n      var c = (0, _wonka.share)(a),\n          d = !1,\n          e = !1;\n      (0, _wonka.onPush)(function () {\n        return d = !0;\n      })((0, _wonka.takeWhile)(function () {\n        return !e;\n      })(c))(b);\n\n      if (!d) {\n        throw e = !0, b(0), (0, _wonka.toPromise)((0, _wonka.take)(1)(c));\n      }\n    };\n  }(f) : f;\n};\n\nZ.prototype.query = function (a, b, c) {\n  c && \"boolean\" == typeof c.suspense || (c = (0, _ab84a._)({}, c, {\n    suspense: !1\n  }));\n  return B(this.executeQuery(r(a, b), c));\n};\n\nZ.prototype.readQuery = function (a, b, c) {\n  var d = null;\n  (0, _wonka.subscribe)(function (a) {\n    d = a;\n  })(this.executeQuery(r(a, b), c)).unsubscribe();\n  return d;\n};\n\nZ.prototype.subscription = function (a, b, c) {\n  return this.executeSubscription(r(a, b), c);\n};\n\nZ.prototype.mutation = function (a, b, c) {\n  return B(this.executeMutation(r(a, b), c));\n};"},"sourceMaps":{"js":{"mappings":[{"source":"../src/utils/request.ts","name":"const","original":{"line":12,"column":0},"generated":{"line":56,"column":0}},{"source":"../src/utils/request.ts","name":"const","original":{"line":12,"column":0},"generated":{"line":56,"column":9}},{"source":"../src/utils/request.ts","name":"const","original":{"line":12,"column":0},"generated":{"line":56,"column":10}},{"source":"../src/utils/request.ts","name":"const","original":{"line":12,"column":0},"generated":{"line":56,"column":11}},{"source":"../src/utils/request.ts","name":"const","original":{"line":12,"column":0},"generated":{"line":56,"column":12}},{"source":"../src/utils/request.ts","name":"Object","original":{"line":12,"column":24},"generated":{"line":56,"column":14}},{"source":"../src/utils/request.ts","name":"const","original":{"line":12,"column":0},"generated":{"line":56,"column":15}},{"source":"../src/utils/request.ts","name":"Object","original":{"line":12,"column":24},"generated":{"line":56,"column":17}},{"source":"../src/utils/hash.ts","name":"phash","original":{"line":14,"column":43},"generated":{"line":59,"column":18}},{"source":"../src/utils/hash.ts","name":"phash","original":{"line":14,"column":43},"generated":{"line":59,"column":19}},{"source":"../src/utils/hash.ts","name":"phash","original":{"line":14,"column":43},"generated":{"line":59,"column":22}},{"source":"../src/utils/hash.ts","name":"phash","original":{"line":14,"column":43},"generated":{"line":59,"column":26}},{"source":"../src/utils/hash.ts","name":"phash","original":{"line":14,"column":43},"generated":{"line":59,"column":27}},{"source":"../src/utils/hash.ts","name":"phash","original":{"line":14,"column":43},"generated":{"line":59,"column":28}},{"source":"../src/utils/hash.ts","name":"phash","original":{"line":14,"column":43},"generated":{"line":59,"column":36}},{"source":"../src/utils/hash.ts","name":"phash","original":{"line":14,"column":43},"generated":{"line":59,"column":37}},{"source":"../src/utils/hash.ts","name":"phash","original":{"line":14,"column":43},"generated":{"line":59,"column":40}},{"source":"../src/utils/hash.ts","name":"phash","original":{"line":14,"column":43},"generated":{"line":59,"column":43}},{"source":"../src/utils/hash.ts","name":"phash","original":{"line":14,"column":43},"generated":{"line":59,"column":44}},{"source":"../src/utils/hash.ts","name":"phash","original":{"line":14,"column":43},"generated":{"line":59,"column":48}},{"source":"../src/utils/request.ts","name":"docs","original":{"line":22,"column":12},"generated":{"line":60,"column":14}},{"source":"../src/utils/request.ts","name":"docs","original":{"line":22,"column":12},"generated":{"line":60,"column":19}},{"source":"../src/utils/request.ts","name":"docs","original":{"line":22,"column":12},"generated":{"line":60,"column":23}},{"source":"../src/utils/request.ts","name":"docs","original":{"line":22,"column":12},"generated":{"line":60,"column":24}},{"source":"../src/utils/request.ts","name":"docs","original":{"line":22,"column":12},"generated":{"line":60,"column":25}},{"source":"../src/utils/request.ts","name":"docs","original":{"line":22,"column":12},"generated":{"line":60,"column":35}},{"source":"../src/utils/request.ts","name":"docs","original":{"line":22,"column":12},"generated":{"line":60,"column":36}},{"source":"../src/utils/request.ts","name":"docs","original":{"line":22,"column":12},"generated":{"line":60,"column":37}},{"source":"../src/utils/request.ts","name":"source","original":{"line":43,"column":2},"generated":{"line":66,"column":11}},{"source":"../src/utils/request.ts","name":"meta","original":{"line":44,"column":2},"generated":{"line":66,"column":14}},{"source":"../src/utils/request.ts","name":"meta","original":{"line":44,"column":2},"generated":{"line":66,"column":17}},{"source":"../src/utils/request.ts","name":"context","original":{"line":47,"column":2},"generated":{"line":67,"column":25}},{"source":"../src/utils/request.ts","name":"context","original":{"line":47,"column":2},"generated":{"line":67,"column":28}},{"source":"../src/utils/typenames.ts","name":"b","original":{"line":20,"column":9},"generated":{"line":77,"column":32}},{"source":"../src/utils/typenames.ts","name":"b","original":{"line":20,"column":9},"generated":{"line":77,"column":40}},{"source":"../src/utils/typenames.ts","name":"b","original":{"line":20,"column":9},"generated":{"line":77,"column":44}},{"source":"../src/utils/typenames.ts","name":"const","original":{"line":21,"column":9},"generated":{"line":78,"column":11}},{"source":"../src/utils/typenames.ts","name":"types","original":{"line":30,"column":9},"generated":{"line":83,"column":9}},{"source":"../src/utils/typenames.ts","name":"types","original":{"line":30,"column":9},"generated":{"line":83,"column":11}},{"source":"../src/utils/typenames.ts","name":"types","original":{"line":30,"column":9},"generated":{"line":83,"column":14}},{"source":"../src/utils/typenames.ts","name":"types","original":{"line":30,"column":9},"generated":{"line":83,"column":17}},{"source":"../src/utils/typenames.ts","name":"node","original":{"line":36,"column":20},"generated":{"line":91,"column":11}},{"source":"../src/utils/typenames.ts","name":"node","original":{"line":36,"column":20},"generated":{"line":91,"column":14}},{"source":"../src/utils/typenames.ts","name":"node","original":{"line":36,"column":20},"generated":{"line":91,"column":17}},{"source":"../src/utils/typenames.ts","name":"node","original":{"line":69,"column":18},"generated":{"line":94,"column":12}},{"source":"../src/utils/typenames.ts","name":"node","original":{"line":69,"column":18},"generated":{"line":94,"column":20}},{"source":"../src/utils/typenames.ts","name":"node","original":{"line":69,"column":18},"generated":{"line":94,"column":24}},{"source":"../src/utils/toSuspenseSource.ts","name":"shared","original":{"line":5,"column":8},"generated":{"line":100,"column":0}},{"source":"../src/utils/toSuspenseSource.ts","name":"shared","original":{"line":5,"column":8},"generated":{"line":100,"column":23}},{"source":"../src/utils/toSuspenseSource.ts","name":"shared","original":{"line":5,"column":8},"generated":{"line":100,"column":24}},{"source":"../src/utils/toSuspenseSource.ts","name":"hasSuspended","original":{"line":7,"column":6},"generated":{"line":100,"column":28}},{"source":"../src/utils/toSuspenseSource.ts","name":"hasSuspended","original":{"line":7,"column":6},"generated":{"line":100,"column":40}},{"source":"../src/utils/toSuspenseSource.ts","name":"hasSuspended","original":{"line":7,"column":6},"generated":{"line":100,"column":47}},{"source":"../src/utils/toSuspenseSource.ts","name":"hasSuspended","original":{"line":7,"column":6},"generated":{"line":100,"column":48}},{"source":"../src/utils/toSuspenseSource.ts","name":"hasSuspended","original":{"line":7,"column":6},"generated":{"line":100,"column":49}},{"source":"../src/utils/toSuspenseSource.ts","name":"hasSuspended","original":{"line":7,"column":6},"generated":{"line":100,"column":50}},{"source":"../src/utils/toSuspenseSource.ts","name":"shared","original":{"line":5,"column":8},"generated":{"line":100,"column":51}},{"source":"../src/utils/toSuspenseSource.ts","name":"hasSuspended","original":{"line":7,"column":6},"generated":{"line":100,"column":54}},{"source":"../src/utils/toSuspenseSource.ts","name":"hasSuspended","original":{"line":7,"column":6},"generated":{"line":100,"column":55}},{"source":"../src/utils/toSuspenseSource.ts","name":"hasSuspended","original":{"line":7,"column":6},"generated":{"line":100,"column":56}},{"source":"../src/utils/toSuspenseSource.ts","name":"hasSuspended","original":{"line":7,"column":6},"generated":{"line":100,"column":60}},{"source":"../src/utils/toSuspenseSource.ts","name":"hasSuspended","original":{"line":7,"column":6},"generated":{"line":100,"column":61}},{"source":"../src/utils/toSuspenseSource.ts","name":"hasSuspended","original":{"line":7,"column":6},"generated":{"line":100,"column":62}},{"source":"../src/utils/toSuspenseSource.ts","name":"hasSuspended","original":{"line":7,"column":6},"generated":{"line":100,"column":63}},{"source":"../src/utils/toSuspenseSource.ts","name":"hasSuspended","original":{"line":7,"column":6},"generated":{"line":100,"column":64}},{"source":"../src/utils/toSuspenseSource.ts","name":"hasSuspended","original":{"line":7,"column":6},"generated":{"line":100,"column":65}},{"source":"../src/utils/toSuspenseSource.ts","name":"shared","original":{"line":5,"column":8},"generated":{"line":100,"column":66}},{"source":"../src/utils/toSuspenseSource.ts","name":"hasSuspended","original":{"line":7,"column":6},"generated":{"line":100,"column":69}},{"source":"../src/utils/toSuspenseSource.ts","name":"hasSuspended","original":{"line":7,"column":6},"generated":{"line":100,"column":70}},{"source":"../src/utils/toSuspenseSource.ts","name":"hasSuspended","original":{"line":7,"column":6},"generated":{"line":100,"column":71}},{"source":"../src/utils/toSuspenseSource.ts","name":"hasSuspended","original":{"line":7,"column":6},"generated":{"line":100,"column":72}},{"source":"../src/utils/toSuspenseSource.ts","name":"hasSuspended","original":{"line":7,"column":6},"generated":{"line":100,"column":73}},{"source":"../src/utils/toSuspenseSource.ts","name":"hasSuspended","original":{"line":7,"column":6},"generated":{"line":100,"column":74}},{"source":"../src/utils/toSuspenseSource.ts","name":"hasSuspended","original":{"line":7,"column":6},"generated":{"line":100,"column":75}},{"source":"../src/utils/toSuspenseSource.ts","name":"hasSuspended","original":{"line":7,"column":6},"generated":{"line":100,"column":77}},{"source":"../src/utils/toSuspenseSource.ts","name":"hasSuspended","original":{"line":7,"column":6},"generated":{"line":100,"column":78}},{"source":"../src/utils/toSuspenseSource.ts","name":"shared","original":{"line":5,"column":8},"generated":{"line":100,"column":79}},{"source":"../src/utils/toSuspenseSource.ts","name":"onPush","original":{"line":12,"column":4},"generated":{"line":104,"column":9}},{"source":"../src/utils/maskTypename.ts","name":"data","original":{"line":2,"column":7},"generated":{"line":111,"column":9}},{"source":"../src/utils/maskTypename.ts","name":"data","original":{"line":2,"column":7},"generated":{"line":111,"column":11}},{"source":"../src/utils/maskTypename.ts","name":"data","original":{"line":2,"column":7},"generated":{"line":111,"column":14}},{"source":"../src/utils/maskTypename.ts","name":"data","original":{"line":2,"column":48},"generated":{"line":115,"column":11}},{"source":"../src/utils/maskTypename.ts","name":"data","original":{"line":2,"column":48},"generated":{"line":115,"column":14}},{"source":"../src/utils/withPromise.ts","name":"source$","original":{"line":4,"column":31},"generated":{"line":117,"column":11}},{"source":"../src/utils/withPromise.ts","name":"source$","original":{"line":4,"column":31},"generated":{"line":117,"column":25}},{"source":"../src/utils/withPromise.ts","name":"source$","original":{"line":4,"column":31},"generated":{"line":117,"column":27}},{"source":"../src/utils/withPromise.ts","name":"source$","original":{"line":4,"column":31},"generated":{"line":117,"column":29}},{"source":"../src/utils/withPromise.ts","name":"source$","original":{"line":4,"column":31},"generated":{"line":117,"column":30}},{"source":"../src/utils/withPromise.ts","name":"source$","original":{"line":4,"column":31},"generated":{"line":117,"column":32}},{"source":"../src/utils/withPromise.ts","name":"toPromise","original":{"line":6,"column":27},"generated":{"line":119,"column":20}},{"source":"../src/utils/withPromise.ts","name":"toPromise","original":{"line":6,"column":27},"generated":{"line":119,"column":21}},{"source":"../src/utils/withPromise.ts","name":"toPromise","original":{"line":6,"column":27},"generated":{"line":119,"column":22}},{"source":"../src/utils/withPromise.ts","name":"toPromise","original":{"line":6,"column":27},"generated":{"line":119,"column":34}},{"source":"../src/utils/withPromise.ts","name":"toPromise","original":{"line":6,"column":27},"generated":{"line":119,"column":35}},{"source":"../src/utils/withPromise.ts","name":"toPromise","original":{"line":6,"column":27},"generated":{"line":119,"column":45}},{"source":"../src/utils/withPromise.ts","name":"toPromise","original":{"line":6,"column":27},"generated":{"line":119,"column":46}},{"source":"../src/utils/withPromise.ts","name":"toPromise","original":{"line":6,"column":27},"generated":{"line":119,"column":52}},{"source":"../src/utils/withPromise.ts","name":"toPromise","original":{"line":6,"column":27},"generated":{"line":119,"column":53}},{"source":"../src/utils/withPromise.ts","name":"toPromise","original":{"line":6,"column":27},"generated":{"line":119,"column":54}},{"source":"../src/utils/withPromise.ts","name":"toPromise","original":{"line":6,"column":27},"generated":{"line":120,"column":33}},{"source":"../src/utils/withPromise.ts","name":"toPromise","original":{"line":6,"column":27},"generated":{"line":125,"column":0}},{"source":"../src/utils/withPromise.ts","name":"toPromise","original":{"line":6,"column":27},"generated":{"line":125,"column":9}},{"source":"../src/utils/withPromise.ts","name":"toPromise","original":{"line":6,"column":27},"generated":{"line":125,"column":10}},{"source":"../src/utils/withPromise.ts","name":"source$","original":{"line":4,"column":31},"generated":{"line":127,"column":0}},{"source":"../src/utils/withPromise.ts","name":"source$","original":{"line":4,"column":31},"generated":{"line":127,"column":5}},{"source":"../src/exchanges/cache.ts","name":"_extends","original":{"line":26,"column":61},"generated":{"line":137,"column":9}},{"source":"../src/exchanges/cache.ts","name":null,"original":{"line":82,"column":48},"generated":{"line":140,"column":0}},{"source":"../src/exchanges/cache.ts","name":null,"original":{"line":82,"column":48},"generated":{"line":140,"column":9}},{"source":"../src/exchanges/cache.ts","name":null,"original":{"line":82,"column":48},"generated":{"line":140,"column":10}},{"source":"../src/exchanges/cache.ts","name":null,"original":{"line":82,"column":48},"generated":{"line":140,"column":11}},{"source":"../src/exchanges/cache.ts","name":null,"original":{"line":82,"column":48},"generated":{"line":140,"column":12}},{"source":"../src/exchanges/cache.ts","name":null,"original":{"line":82,"column":48},"generated":{"line":140,"column":14}},{"source":"../src/exchanges/cache.ts","name":"client","original":{"line":131,"column":9},"generated":{"line":162,"column":9}},{"source":"../src/exchanges/cache.ts","name":"client","original":{"line":131,"column":9},"generated":{"line":162,"column":29}},{"source":"../src/exchanges/cache.ts","name":"client","original":{"line":131,"column":9},"generated":{"line":162,"column":30}},{"source":"../src/exchanges/cache.ts","name":"client","original":{"line":131,"column":9},"generated":{"line":162,"column":33}},{"source":"../src/exchanges/cache.ts","name":"client","original":{"line":131,"column":9},"generated":{"line":162,"column":34}},{"source":"../src/exchanges/cache.ts","name":"client","original":{"line":131,"column":9},"generated":{"line":162,"column":35}},{"source":"../src/exchanges/cache.ts","name":"client","original":{"line":131,"column":9},"generated":{"line":162,"column":48}},{"source":"../src/exchanges/cache.ts","name":"client","original":{"line":131,"column":9},"generated":{"line":162,"column":53}},{"source":"../src/exchanges/cache.ts","name":"client","original":{"line":131,"column":9},"generated":{"line":162,"column":65}},{"source":"../src/exchanges/cache.ts","name":"resultCache","original":{"line":172,"column":8},"generated":{"line":166,"column":9}},{"source":"../src/exchanges/cache.ts","name":"resultCache","original":{"line":172,"column":8},"generated":{"line":166,"column":10}},{"source":"../src/exchanges/cache.ts","name":"resultCache","original":{"line":172,"column":8},"generated":{"line":166,"column":11}},{"source":"../src/exchanges/cache.ts","name":"resultCache","original":{"line":172,"column":8},"generated":{"line":166,"column":15}},{"source":"../src/exchanges/cache.ts","name":"resultCache","original":{"line":172,"column":8},"generated":{"line":166,"column":19}},{"source":"../src/exchanges/cache.ts","name":"resultCache","original":{"line":172,"column":8},"generated":{"line":166,"column":20}},{"source":"../src/exchanges/cache.ts","name":"resultCache","original":{"line":172,"column":8},"generated":{"line":166,"column":21}},{"source":"../src/exchanges/cache.ts","name":"resultCache","original":{"line":172,"column":8},"generated":{"line":166,"column":31}},{"source":"../src/exchanges/cache.ts","name":"resultCache","original":{"line":172,"column":8},"generated":{"line":166,"column":34}},{"source":"../src/exchanges/cache.ts","name":"resultCache","original":{"line":173,"column":25},"generated":{"line":167,"column":15}},{"source":"../src/exchanges/cache.ts","name":"resultCache","original":{"line":172,"column":8},"generated":{"line":167,"column":22}},{"source":"../src/exchanges/cache.ts","name":"resultCache","original":{"line":172,"column":8},"generated":{"line":168,"column":16}},{"source":"../src/exchanges/cache.ts","name":"resultCache","original":{"line":172,"column":8},"generated":{"line":170,"column":0}},{"source":"../src/exchanges/cache.ts","name":"resultCache","original":{"line":172,"column":8},"generated":{"line":170,"column":3}},{"source":"../src/exchanges/cache.ts","name":"operationCache","original":{"line":164,"column":6},"generated":{"line":179,"column":11}},{"source":"../src/exchanges/cache.ts","name":"operationCache","original":{"line":164,"column":6},"generated":{"line":179,"column":12}},{"source":"../src/exchanges/cache.ts","name":"operationCache","original":{"line":164,"column":6},"generated":{"line":179,"column":13}},{"source":"../src/exchanges/cache.ts","name":"operationCache","original":{"line":164,"column":6},"generated":{"line":179,"column":14}},{"source":"../src/exchanges/cache.ts","name":"operationCache","original":{"line":164,"column":6},"generated":{"line":179,"column":15}},{"source":"../src/exchanges/cache.ts","name":"operationCache","original":{"line":164,"column":6},"generated":{"line":179,"column":20}},{"source":"../src/exchanges/cache.ts","name":"pendingOperations","original":{"line":171,"column":2},"generated":{"line":183,"column":0}},{"source":"../src/exchanges/cache.ts","name":"pendingOperations","original":{"line":171,"column":2},"generated":{"line":183,"column":9}},{"source":"../src/exchanges/cache.ts","name":"pendingOperations","original":{"line":171,"column":2},"generated":{"line":183,"column":10}},{"source":"../src/exchanges/cache.ts","name":"pendingOperations","original":{"line":171,"column":2},"generated":{"line":183,"column":11}},{"source":"../src/exchanges/cache.ts","name":"pendingOperations","original":{"line":171,"column":2},"generated":{"line":183,"column":12}},{"source":"../src/exchanges/cache.ts","name":"pendingOperations","original":{"line":171,"column":2},"generated":{"line":183,"column":14}},{"source":"../src/exchanges/debug.ts","name":"result","original":{"line":14,"column":12},"generated":{"line":194,"column":11}},{"source":"../src/exchanges/debug.ts","name":"op","original":{"line":12,"column":12},"generated":{"line":197,"column":11}},{"source":"../src/exchanges/debug.ts","name":"op","original":{"line":12,"column":12},"generated":{"line":197,"column":14}},{"source":"../src/exchanges/dedup.ts","name":"operation","original":{"line":8,"column":35},"generated":{"line":203,"column":13}},{"source":"../src/exchanges/dedup.ts","name":"operation","original":{"line":8,"column":35},"generated":{"line":203,"column":16}},{"source":"../src/exchanges/fetch.ts","name":"mergeMap","original":{"line":24,"column":6},"generated":{"line":236,"column":6}},{"source":"../src/exchanges/fetch.ts","name":"mergeMap","original":{"line":24,"column":6},"generated":{"line":237,"column":6}},{"source":"../src/exchanges/fetch.ts","name":"mergeMap","original":{"line":24,"column":6},"generated":{"line":237,"column":7}},{"source":"../src/exchanges/fetch.ts","name":"filter","original":{"line":28,"column":10},"generated":{"line":237,"column":10}},{"source":"../src/exchanges/fetch.ts","name":"filter","original":{"line":28,"column":10},"generated":{"line":237,"column":11}},{"source":"../src/exchanges/fetch.ts","name":"filter","original":{"line":28,"column":10},"generated":{"line":237,"column":12}},{"source":"../src/exchanges/fetch.ts","name":"filter","original":{"line":28,"column":10},"generated":{"line":238,"column":6}},{"source":"../src/exchanges/fetch.ts","name":"filter","original":{"line":28,"column":10},"generated":{"line":238,"column":7}},{"source":"../src/exchanges/fetch.ts","name":"filter","original":{"line":28,"column":10},"generated":{"line":238,"column":10}},{"source":"../src/exchanges/fetch.ts","name":"filter","original":{"line":28,"column":10},"generated":{"line":238,"column":11}},{"source":"../src/exchanges/fetch.ts","name":"filter","original":{"line":28,"column":10},"generated":{"line":238,"column":12}},{"source":"../src/exchanges/fetch.ts","name":"filter","original":{"line":28,"column":10},"generated":{"line":239,"column":6}},{"source":"../src/exchanges/fetch.ts","name":"filter","original":{"line":28,"column":10},"generated":{"line":239,"column":7}},{"source":"../src/exchanges/fetch.ts","name":"filter","original":{"line":28,"column":10},"generated":{"line":239,"column":10}},{"source":"../src/exchanges/fetch.ts","name":"filter","original":{"line":28,"column":10},"generated":{"line":239,"column":11}},{"source":"../src/exchanges/fetch.ts","name":"filter","original":{"line":28,"column":10},"generated":{"line":239,"column":12}},{"source":"../src/exchanges/fetch.ts","name":"filter","original":{"line":28,"column":10},"generated":{"line":240,"column":6}},{"source":"../src/exchanges/fetch.ts","name":"filter","original":{"line":28,"column":10},"generated":{"line":240,"column":7}},{"source":"../src/exchanges/fetch.ts","name":"filter","original":{"line":28,"column":10},"generated":{"line":240,"column":10}},{"source":"../src/exchanges/fetch.ts","name":"filter","original":{"line":28,"column":10},"generated":{"line":240,"column":14}},{"source":"../src/exchanges/fetch.ts","name":"filter","original":{"line":28,"column":10},"generated":{"line":240,"column":17}},{"source":"../src/exchanges/fallback.ts","name":"filter","original":{"line":29,"column":4},"generated":{"line":243,"column":13}},{"source":"../src/exchanges/fallback.ts","name":"filter","original":{"line":29,"column":4},"generated":{"line":243,"column":15}},{"source":"../src/exchanges/fallback.ts","name":"filter","original":{"line":29,"column":4},"generated":{"line":243,"column":18}},{"source":"../src/exchanges/fallback.ts","name":"fallbackExchange","original":{"line":32,"column":46},"generated":{"line":246,"column":10}},{"source":"../src/exchanges/fallback.ts","name":"fallbackExchange","original":{"line":32,"column":46},"generated":{"line":246,"column":17}},{"source":"../src/exchanges/compose.ts","name":"exchanges","original":{"line":4,"column":33},"generated":{"line":247,"column":13}},{"source":"../src/exchanges/compose.ts","name":"exchange","original":{"line":11,"column":6},"generated":{"line":253,"column":10}},{"source":"../src/exchanges/compose.ts","name":"exchange","original":{"line":11,"column":6},"generated":{"line":253,"column":14}},{"source":"../src/exchanges/index.ts","name":"g","original":{"line":14,"column":32},"generated":{"line":257,"column":10}},{"source":"../src/exchanges/index.ts","name":"g","original":{"line":14,"column":32},"generated":{"line":257,"column":11}},{"source":"../src/exchanges/index.ts","name":"cacheExchange","original":{"line":14,"column":48},"generated":{"line":257,"column":14}},{"source":"../src/exchanges/index.ts","name":"cacheExchange","original":{"line":14,"column":48},"generated":{"line":257,"column":15}},{"source":"../src/exchanges/index.ts","name":"cacheExchange","original":{"line":14,"column":48},"generated":{"line":257,"column":16}},{"source":"../src/exchanges/index.ts","name":"cacheExchange","original":{"line":14,"column":48},"generated":{"line":257,"column":25}},{"source":"../src/exchanges/index.ts","name":"cacheExchange","original":{"line":14,"column":48},"generated":{"line":257,"column":26}},{"source":"../src/exchanges/index.ts","name":"cacheExchange","original":{"line":14,"column":48},"generated":{"line":257,"column":33}},{"source":"../src/exchanges/index.ts","name":"cacheExchange","original":{"line":14,"column":48},"generated":{"line":257,"column":34}},{"source":"../src/client.ts","name":"a","original":{"line":99,"column":2},"generated":{"line":258,"column":12}},{"source":"../src/client.ts","name":"a","original":{"line":99,"column":2},"generated":{"line":258,"column":13}},{"source":"../src/client.ts","name":"data","original":{"line":99,"column":2},"generated":{"line":258,"column":14}},{"source":"../src/client.ts","name":"data","original":{"line":99,"column":2},"generated":{"line":258,"column":20}},{"source":"../src/client.ts","name":"data","original":{"line":99,"column":2},"generated":{"line":258,"column":27}},{"source":"../src/client.ts","name":"data","original":{"line":99,"column":2},"generated":{"line":258,"column":30}},{"source":"../src/client.ts","name":"data","original":{"line":99,"column":2},"generated":{"line":258,"column":37}},{"source":"../src/client.ts","name":"data","original":{"line":99,"column":2},"generated":{"line":258,"column":38}},{"source":"../src/client.ts","name":"data","original":{"line":99,"column":2},"generated":{"line":258,"column":42}},{"source":"../src/exchanges/fetch.ts","name":"takeUntil","original":{"line":47,"column":10},"generated":{"line":275,"column":10}},{"source":"../src/exchanges/fetch.ts","name":"takeUntil","original":{"line":47,"column":10},"generated":{"line":275,"column":13}},{"source":"../src/exchanges/fetch.ts","name":"mergeMap","original":{"line":24,"column":6},"generated":{"line":275,"column":17}},{"source":"../src/exchanges/fetch.ts","name":"mergeMap","original":{"line":24,"column":6},"generated":{"line":275,"column":18}},{"source":"../src/exchanges/fetch.ts","name":"mergeMap","original":{"line":24,"column":6},"generated":{"line":275,"column":21}},{"source":"../src/exchanges/fetch.ts","name":"mergeMap","original":{"line":24,"column":6},"generated":{"line":275,"column":30}},{"source":"../src/exchanges/fetch.ts","name":"mergeMap","original":{"line":24,"column":6},"generated":{"line":275,"column":31}},{"source":"../src/exchanges/fetch.ts","name":"mergeMap","original":{"line":24,"column":6},"generated":{"line":275,"column":32}},{"source":"../src/exchanges/fetch.ts","name":"mergeMap","original":{"line":24,"column":6},"generated":{"line":275,"column":33}},{"source":"../src/exchanges/fetch.ts","name":"mergeMap","original":{"line":24,"column":6},"generated":{"line":275,"column":35}},{"source":"../src/exchanges/fetch.ts","name":"mergeMap","original":{"line":24,"column":6},"generated":{"line":275,"column":36}},{"source":"../src/exchanges/fetch.ts","name":"mergeMap","original":{"line":24,"column":6},"generated":{"line":275,"column":38}},{"source":"../src/client.ts","name":"this","original":{"line":324,"column":22},"generated":{"line":277,"column":10}},{"source":"../src/client.ts","name":"this","original":{"line":324,"column":22},"generated":{"line":277,"column":11}},{"source":"../src/client.ts","name":"this","original":{"line":324,"column":22},"generated":{"line":277,"column":14}},{"source":"../src/client.ts","name":"this","original":{"line":324,"column":22},"generated":{"line":277,"column":15}},{"source":"../src/client.ts","name":"this","original":{"line":324,"column":22},"generated":{"line":277,"column":16}},{"source":"../src/client.ts","name":"this","original":{"line":324,"column":22},"generated":{"line":278,"column":10}},{"source":"../src/client.ts","name":"this","original":{"line":324,"column":22},"generated":{"line":278,"column":11}},{"source":"../src/client.ts","name":"this","original":{"line":325,"column":11},"generated":{"line":278,"column":14}},{"source":"../src/client.ts","name":"this","original":{"line":325,"column":11},"generated":{"line":278,"column":15}},{"source":"../src/client.ts","name":"this","original":{"line":325,"column":11},"generated":{"line":278,"column":16}},{"source":"../src/client.ts","name":"this","original":{"line":325,"column":11},"generated":{"line":279,"column":10}},{"source":"../src/client.ts","name":"this","original":{"line":325,"column":11},"generated":{"line":279,"column":11}},{"source":"../src/client.ts","name":"this","original":{"line":325,"column":11},"generated":{"line":279,"column":14}},{"source":"../src/client.ts","name":"this","original":{"line":325,"column":11},"generated":{"line":279,"column":15}},{"source":"../src/client.ts","name":"this","original":{"line":325,"column":11},"generated":{"line":279,"column":16}},{"source":"../src/client.ts","name":"this","original":{"line":325,"column":11},"generated":{"line":279,"column":23}},{"source":"../src/client.ts","name":"this","original":{"line":325,"column":11},"generated":{"line":279,"column":24}},{"source":"../src/client.ts","name":"opts","original":{"line":340,"column":4},"generated":{"line":280,"column":22}},{"source":"../src/client.ts","name":"opts","original":{"line":340,"column":4},"generated":{"line":280,"column":26}},{"source":"../src/client.ts","name":"opts","original":{"line":340,"column":4},"generated":{"line":280,"column":27}},{"source":"../src/client.ts","name":"opts","original":{"line":340,"column":4},"generated":{"line":280,"column":28}},{"source":"../src/client.ts","name":"opts","original":{"line":340,"column":4},"generated":{"line":280,"column":33}},{"source":"../src/client.ts","name":"opts","original":{"line":340,"column":4},"generated":{"line":281,"column":20}},{"source":"../src/client.ts","name":"this","original":{"line":343,"column":11},"generated":{"line":282,"column":14}},{"source":"../src/client.ts","name":"opts","original":{"line":340,"column":4},"generated":{"line":282,"column":15}},{"source":"../src/client.ts","name":"opts","original":{"line":340,"column":4},"generated":{"line":284,"column":0}},{"source":"../src/client.ts","name":"b","original":{"line":101,"column":22},"generated":{"line":285,"column":18}},{"source":"../src/client.ts","name":"b","original":{"line":101,"column":22},"generated":{"line":285,"column":19}},{"source":"../src/client.ts","name":"b","original":{"line":101,"column":22},"generated":{"line":285,"column":20}},{"source":"../src/client.ts","name":"b","original":{"line":101,"column":22},"generated":{"line":285,"column":21}},{"source":"../src/client.ts","name":"b","original":{"line":101,"column":22},"generated":{"line":285,"column":22}},{"source":"../src/client.ts","name":"b","original":{"line":101,"column":22},"generated":{"line":285,"column":25}},{"source":"../src/client.ts","name":"b","original":{"line":101,"column":22},"generated":{"line":285,"column":29}},{"source":"../src/client.ts","name":"b","original":{"line":101,"column":22},"generated":{"line":285,"column":32}},{"source":"../src/client.ts","name":"b","original":{"line":101,"column":22},"generated":{"line":285,"column":37}},{"source":"../src/client.ts","name":"b","original":{"line":101,"column":22},"generated":{"line":285,"column":41}},{"source":"../src/client.ts","name":"b","original":{"line":101,"column":22},"generated":{"line":285,"column":42}},{"source":"../src/client.ts","name":"b","original":{"line":101,"column":22},"generated":{"line":285,"column":43}},{"source":"../src/exchanges/fetch.ts","name":"mergeMap","original":{"line":24,"column":6},"generated":{"line":288,"column":3}},{"source":"../src/exchanges/fetch.ts","name":"mergeMap","original":{"line":24,"column":6},"generated":{"line":288,"column":5}},{"source":"../src/exchanges/fetch.ts","name":"filter","original":{"line":18,"column":6},"generated":{"line":288,"column":7}},{"source":"../src/exchanges/fetch.ts","name":"mergeMap","original":{"line":24,"column":6},"generated":{"line":288,"column":8}},{"source":"../src/exchanges/fetch.ts","name":"fetchResults$","original":{"line":79,"column":18},"generated":{"line":290,"column":30}},{"source":"../src/client.ts","name":"opts","original":{"line":118,"column":26},"generated":{"line":315,"column":25}},{"source":"../src/client.ts","name":"undefined","original":{"line":147,"column":25},"generated":{"line":330,"column":8}},{"source":"../src/client.ts","name":"undefined","original":{"line":147,"column":25},"generated":{"line":330,"column":9}},{"source":"../src/client.ts","name":"undefined","original":{"line":147,"column":25},"generated":{"line":330,"column":10}},{"source":"../src/client.ts","name":"undefined","original":{"line":147,"column":25},"generated":{"line":330,"column":13}},{"source":"../src/client.ts","name":"opts","original":{"line":147,"column":6},"generated":{"line":330,"column":14}},{"source":"../src/client.ts","name":"undefined","original":{"line":147,"column":25},"generated":{"line":330,"column":15}},{"source":"../src/client.ts","name":null,"original":{"line":166,"column":9},"generated":{"line":332,"column":9}},{"source":"../src/client.ts","name":null,"original":{"line":166,"column":9},"generated":{"line":332,"column":43}},{"source":"../src/client.ts","name":null,"original":{"line":166,"column":9},"generated":{"line":332,"column":44}},{"source":"../src/client.ts","name":null,"original":{"line":166,"column":9},"generated":{"line":332,"column":45}},{"source":"../src/client.ts","name":null,"original":{"line":166,"column":9},"generated":{"line":333,"column":19}},{"source":"../src/client.ts","name":null,"original":{"line":166,"column":9},"generated":{"line":334,"column":47}},{"source":"../src/client.ts","name":null,"original":{"line":166,"column":9},"generated":{"line":335,"column":18}},{"source":"../src/client.ts","name":null,"original":{"line":166,"column":9},"generated":{"line":337,"column":0}},{"source":"../src/client.ts","name":null,"original":{"line":166,"column":9},"generated":{"line":337,"column":5}},{"source":"../src/client.ts","name":"activeOperations","original":{"line":203,"column":23},"generated":{"line":341,"column":12}},{"source":"../src/client.ts","name":"activeOperations","original":{"line":203,"column":23},"generated":{"line":342,"column":6}},{"source":"../src/client.ts","name":"activeOperations","original":{"line":203,"column":23},"generated":{"line":342,"column":7}},{"source":"../src/client.ts","name":"activeOperations","original":{"line":203,"column":23},"generated":{"line":342,"column":10}},{"source":"../src/client.ts","name":"activeOperations","original":{"line":203,"column":23},"generated":{"line":342,"column":11}},{"source":"../src/client.ts","name":"activeOperations","original":{"line":203,"column":23},"generated":{"line":342,"column":12}},{"source":"../src/client.ts","name":"activeOperations","original":{"line":203,"column":23},"generated":{"line":343,"column":6}},{"source":"../src/client.ts","name":"activeOperations","original":{"line":203,"column":23},"generated":{"line":343,"column":7}},{"source":"../src/client.ts","name":"activeOperations","original":{"line":203,"column":23},"generated":{"line":343,"column":10}},{"source":"../src/client.ts","name":"activeOperations","original":{"line":203,"column":23},"generated":{"line":343,"column":14}},{"source":"../src/client.ts","name":"activeOperations","original":{"line":203,"column":23},"generated":{"line":343,"column":17}},{"source":"../src/client.ts","name":"maskTypename","original":{"line":223,"column":21},"generated":{"line":344,"column":19}},{"source":"../src/client.ts","name":"maskTypename","original":{"line":223,"column":21},"generated":{"line":344,"column":22}},{"source":"../src/client.ts","name":null,"original":{"line":219,"column":8},"generated":{"line":354,"column":0}},{"source":"../src/client.ts","name":null,"original":{"line":219,"column":8},"generated":{"line":354,"column":9}},{"source":"../src/client.ts","name":null,"original":{"line":219,"column":8},"generated":{"line":354,"column":10}},{"source":"../src/client.ts","name":null,"original":{"line":219,"column":8},"generated":{"line":354,"column":11}},{"source":"../src/client.ts","name":null,"original":{"line":219,"column":8},"generated":{"line":354,"column":12}},{"source":"../src/client.ts","name":null,"original":{"line":219,"column":8},"generated":{"line":354,"column":14}},{"source":"../src/client.ts","name":"operationName","original":{"line":229,"column":8},"generated":{"line":355,"column":21}},{"source":"../src/client.ts","name":"operationName","original":{"line":229,"column":8},"generated":{"line":355,"column":22}},{"source":"../src/client.ts","name":"operationName","original":{"line":229,"column":8},"generated":{"line":355,"column":23}},{"source":"../src/client.ts","name":"operationName","original":{"line":229,"column":8},"generated":{"line":355,"column":40}},{"source":"../src/client.ts","name":"operationName","original":{"line":229,"column":8},"generated":{"line":355,"column":55}},{"source":"../src/client.ts","name":"operationName","original":{"line":229,"column":8},"generated":{"line":355,"column":56}},{"source":"../src/client.ts","name":"operationName","original":{"line":229,"column":8},"generated":{"line":355,"column":57}},{"source":"../src/client.ts","name":"onEnd","original":{"line":251,"column":6},"generated":{"line":364,"column":0}},{"source":"../src/client.ts","name":"onEnd","original":{"line":251,"column":6},"generated":{"line":364,"column":4}},{"source":"../src/client.ts","name":"onEnd","original":{"line":251,"column":6},"generated":{"line":364,"column":5}},{"source":"../src/client.ts","name":"onEnd","original":{"line":251,"column":6},"generated":{"line":364,"column":8}},{"source":"../src/client.ts","name":"onEnd","original":{"line":251,"column":6},"generated":{"line":364,"column":29}},{"source":"../src/client.ts","name":"onEnd","original":{"line":251,"column":6},"generated":{"line":364,"column":39}},{"source":"../src/client.ts","name":"onEnd","original":{"line":251,"column":6},"generated":{"line":364,"column":40}},{"source":"../src/client.ts","name":"onEnd","original":{"line":251,"column":6},"generated":{"line":364,"column":42}},{"source":"../src/client.ts","name":"takeUntil","original":{"line":247,"column":6},"generated":{"line":366,"column":14}},{"source":"../src/client.ts","name":"onEnd","original":{"line":251,"column":6},"generated":{"line":366,"column":33}},{"source":"../src/client.ts","name":"onEnd","original":{"line":251,"column":6},"generated":{"line":366,"column":43}},{"source":"../src/client.ts","name":"onEnd","original":{"line":251,"column":6},"generated":{"line":366,"column":44}},{"source":"../src/client.ts","name":"onEnd","original":{"line":251,"column":6},"generated":{"line":366,"column":46}},{"source":"../src/client.ts","name":"operation","original":{"line":256,"column":11},"generated":{"line":367,"column":51}},{"source":"../src/client.ts","name":"operation","original":{"line":256,"column":11},"generated":{"line":367,"column":59}},{"source":"../src/client.ts","name":"takeUntil","original":{"line":247,"column":6},"generated":{"line":368,"column":7}},{"source":"../src/client.ts","name":"takeUntil","original":{"line":247,"column":6},"generated":{"line":368,"column":9}},{"source":"../src/client.ts","name":"takeUntil","original":{"line":247,"column":6},"generated":{"line":368,"column":10}},{"source":"../src/client.ts","name":"takeUntil","original":{"line":247,"column":6},"generated":{"line":369,"column":10}},{"source":"../src/client.ts","name":"takeUntil","original":{"line":247,"column":6},"generated":{"line":369,"column":11}},{"source":"../src/client.ts","name":"takeUntil","original":{"line":247,"column":6},"generated":{"line":369,"column":14}},{"source":"../src/client.ts","name":"takeUntil","original":{"line":247,"column":6},"generated":{"line":369,"column":28}},{"source":"../src/client.ts","name":"takeUntil","original":{"line":247,"column":6},"generated":{"line":369,"column":29}},{"source":"../src/client.ts","name":"takeUntil","original":{"line":247,"column":6},"generated":{"line":370,"column":10}},{"source":"../src/client.ts","name":"takeUntil","original":{"line":247,"column":6},"generated":{"line":370,"column":11}},{"source":"../src/client.ts","name":"takeUntil","original":{"line":247,"column":6},"generated":{"line":370,"column":14}},{"source":"../src/client.ts","name":"context","original":{"line":268,"column":27},"generated":{"line":370,"column":28}},{"source":"../src/client.ts","name":"takeUntil","original":{"line":247,"column":6},"generated":{"line":370,"column":29}},{"source":"../src/client.ts","name":"context","original":{"line":268,"column":27},"generated":{"line":370,"column":31}},{"source":"../src/client.ts","name":"takeUntil","original":{"line":247,"column":6},"generated":{"line":370,"column":32}},{"source":"../src/client.ts","name":"withPromise","original":{"line":272,"column":11},"generated":{"line":371,"column":10}},{"source":"../src/client.ts","name":"withPromise","original":{"line":272,"column":11},"generated":{"line":371,"column":11}},{"source":"../src/client.ts","name":"withPromise","original":{"line":272,"column":11},"generated":{"line":371,"column":14}},{"source":"../src/client.ts","name":"query","original":{"line":273,"column":38},"generated":{"line":371,"column":28}},{"source":"../src/client.ts","name":"withPromise","original":{"line":272,"column":11},"generated":{"line":371,"column":29}},{"source":"../src/client.ts","name":"variables","original":{"line":273,"column":45},"generated":{"line":371,"column":31}},{"source":"../src/client.ts","name":"withPromise","original":{"line":272,"column":11},"generated":{"line":371,"column":32}},{"source":"../src/client.ts","name":"res","original":{"line":287,"column":17},"generated":{"line":376,"column":0}},{"source":"../src/client.ts","name":"res","original":{"line":287,"column":17},"generated":{"line":376,"column":8}},{"source":"../src/client.ts","name":"res","original":{"line":287,"column":17},"generated":{"line":376,"column":12}},{"source":"../src/client.ts","name":"res","original":{"line":287,"column":17},"generated":{"line":376,"column":14}},{"source":"../src/client.ts","name":"res","original":{"line":287,"column":17},"generated":{"line":377,"column":16}},{"source":"../src/client.ts","name":"res","original":{"line":287,"column":17},"generated":{"line":379,"column":0}},{"source":"../src/client.ts","name":"variables","original":{"line":334,"column":48},"generated":{"line":384,"column":42}},{"source":"../src/client.ts","name":"variables","original":{"line":334,"column":48},"generated":{"line":384,"column":43}},{"source":"../src/client.ts","name":"variables","original":{"line":334,"column":48},"generated":{"line":384,"column":44}},{"source":"../src/client.ts","name":"variables","original":{"line":334,"column":48},"generated":{"line":385,"column":49}},{"source":"../src/client.ts","name":"variables","original":{"line":334,"column":48},"generated":{"line":386,"column":94}},{"source":"../src/client.ts","name":"variables","original":{"line":334,"column":48},"generated":{"line":387,"column":22}},{"source":"../src/client.ts","name":"variables","original":{"line":334,"column":48},"generated":{"line":392,"column":11}},{"source":"../src/client.ts","name":"variables","original":{"line":334,"column":48},"generated":{"line":394,"column":0}},{"source":"../src/client.ts","name":"variables","original":{"line":334,"column":48},"generated":{"line":394,"column":9}},{"source":"../src/client.ts","name":"onEnd","original":{"line":251,"column":6},"generated":{"line":396,"column":5}},{"source":"../src/client.ts","name":"onEnd","original":{"line":251,"column":6},"generated":{"line":396,"column":31}},{"source":"../src/client.ts","name":"onEnd","original":{"line":251,"column":6},"generated":{"line":396,"column":32}},{"source":"../src/exchanges/ssr.ts","name":"cachedOps$","original":{"line":147,"column":6},"generated":{"line":420,"column":10}},{"source":"../src/exchanges/ssr.ts","name":"cachedOps$","original":{"line":147,"column":6},"generated":{"line":420,"column":11}},{"source":"../src/exchanges/ssr.ts","name":"cachedOps$","original":{"line":147,"column":6},"generated":{"line":420,"column":12}},{"source":"../src/exchanges/ssr.ts","name":"a","original":{"line":150,"column":17},"generated":{"line":421,"column":19}},{"source":"../src/exchanges/ssr.ts","name":"a","original":{"line":150,"column":17},"generated":{"line":421,"column":22}},{"source":"../src/exchanges/ssr.ts","name":"data","original":{"line":95,"column":55},"generated":{"line":429,"column":14}},{"source":"../src/exchanges/ssr.ts","name":"data","original":{"line":128,"column":27},"generated":{"line":436,"column":0}},{"source":"../src/exchanges/ssr.ts","name":"data","original":{"line":128,"column":27},"generated":{"line":436,"column":12}},{"source":"../src/exchanges/ssr.ts","name":"data","original":{"line":128,"column":27},"generated":{"line":436,"column":21}},{"source":"../src/exchanges/ssr.ts","name":"data","original":{"line":128,"column":27},"generated":{"line":436,"column":23}},{"source":"../src/exchanges/ssr.ts","name":"data","original":{"line":128,"column":27},"generated":{"line":436,"column":27}},{"source":"../src/exchanges/ssr.ts","name":"data","original":{"line":128,"column":27},"generated":{"line":436,"column":28}},{"source":"../src/exchanges/ssr.ts","name":"data","original":{"line":128,"column":27},"generated":{"line":436,"column":31}},{"source":"../src/exchanges/ssr.ts","name":"op","original":{"line":129,"column":33},"generated":{"line":437,"column":22}},{"source":"../src/exchanges/ssr.ts","name":"error","original":{"line":39,"column":6},"generated":{"line":445,"column":0}},{"source":"../src/exchanges/ssr.ts","name":"error","original":{"line":39,"column":6},"generated":{"line":445,"column":9}},{"source":"../src/exchanges/ssr.ts","name":"error","original":{"line":39,"column":6},"generated":{"line":445,"column":10}},{"source":"../src/exchanges/ssr.ts","name":"error","original":{"line":39,"column":6},"generated":{"line":445,"column":11}},{"source":"../src/exchanges/ssr.ts","name":"error","original":{"line":39,"column":6},"generated":{"line":445,"column":12}},{"source":"../src/exchanges/ssr.ts","name":"error","original":{"line":39,"column":6},"generated":{"line":445,"column":14}},{"source":"../src/exchanges/ssr.ts","name":"error","original":{"line":39,"column":6},"generated":{"line":446,"column":0}},{"source":"../src/exchanges/ssr.ts","name":"error","original":{"line":39,"column":6},"generated":{"line":446,"column":6}},{"source":"../src/exchanges/ssr.ts","name":"error","original":{"line":39,"column":6},"generated":{"line":446,"column":7}},{"source":"../src/exchanges/ssr.ts","name":"error","original":{"line":39,"column":6},"generated":{"line":447,"column":0}},{"source":"../src/exchanges/ssr.ts","name":"error","original":{"line":39,"column":6},"generated":{"line":447,"column":6}},{"source":"../src/exchanges/ssr.ts","name":"error","original":{"line":39,"column":6},"generated":{"line":447,"column":7}},{"source":"../src/exchanges/ssr.ts","name":"error","original":{"line":39,"column":6},"generated":{"line":448,"column":0}},{"source":"../src/exchanges/ssr.ts","name":"error","original":{"line":39,"column":6},"generated":{"line":448,"column":6}},{"source":"../src/exchanges/ssr.ts","name":"error","original":{"line":39,"column":6},"generated":{"line":448,"column":7}},{"source":"../src/exchanges/ssr.ts","name":"error","original":{"line":39,"column":6},"generated":{"line":449,"column":0}},{"source":"../src/exchanges/ssr.ts","name":"error","original":{"line":39,"column":6},"generated":{"line":449,"column":6}},{"source":"../src/exchanges/ssr.ts","name":"error","original":{"line":39,"column":6},"generated":{"line":449,"column":7}},{"source":"../src/exchanges/ssr.ts","name":"error","original":{"line":39,"column":6},"generated":{"line":450,"column":0}},{"source":"../src/exchanges/ssr.ts","name":"error","original":{"line":39,"column":6},"generated":{"line":450,"column":6}},{"source":"../src/exchanges/ssr.ts","name":"error","original":{"line":39,"column":6},"generated":{"line":450,"column":7}},{"source":"../src/exchanges/ssr.ts","name":"error","original":{"line":39,"column":6},"generated":{"line":451,"column":0}},{"source":"../src/exchanges/ssr.ts","name":"error","original":{"line":39,"column":6},"generated":{"line":451,"column":6}},{"source":"../src/exchanges/ssr.ts","name":"error","original":{"line":39,"column":6},"generated":{"line":451,"column":7}},{"source":"../src/exchanges/ssr.ts","name":"error","original":{"line":39,"column":6},"generated":{"line":451,"column":10}},{"source":"../src/exchanges/ssr.ts","name":"error","original":{"line":39,"column":6},"generated":{"line":451,"column":14}},{"source":"../src/exchanges/subscription.ts","name":"make","original":{"line":75,"column":11},"generated":{"line":469,"column":13}},{"source":"../src/exchanges/subscription.ts","name":"make","original":{"line":75,"column":11},"generated":{"line":469,"column":14}},{"source":"../src/exchanges/subscription.ts","name":"make","original":{"line":75,"column":11},"generated":{"line":469,"column":15}},{"source":"../src/exchanges/subscription.ts","name":"result","original":{"line":83,"column":16},"generated":{"line":470,"column":19}},{"source":"../src/exchanges/subscription.ts","name":"next","original":{"line":83,"column":10},"generated":{"line":477,"column":33}},{"source":"../src/exchanges/subscription.ts","name":"next","original":{"line":83,"column":10},"generated":{"line":477,"column":42}},{"source":"../src/exchanges/subscription.ts","name":"next","original":{"line":83,"column":10},"generated":{"line":477,"column":45}},{"source":"../src/exchanges/subscription.ts","name":"teardown$","original":{"line":124,"column":14},"generated":{"line":494,"column":40}},{"source":"../src/exchanges/subscription.ts","name":"teardown$","original":{"line":124,"column":14},"generated":{"line":494,"column":41}},{"source":"../src/exchanges/subscription.ts","name":"teardown$","original":{"line":124,"column":14},"generated":{"line":494,"column":42}},{"source":"../src/exchanges/subscription.ts","name":"teardown$","original":{"line":124,"column":14},"generated":{"line":494,"column":43}},{"source":"../src/exchanges/subscription.ts","name":"teardown$","original":{"line":124,"column":14},"generated":{"line":494,"column":48}},{"source":"../src/exchanges/subscription.ts","name":"forward$","original":{"line":139,"column":40},"generated":{"line":500,"column":38}},{"source":"../src/exchanges/ssr.ts","name":"data","original":{"line":141,"column":12},"generated":{"line":503,"column":45}},{"source":"../src/exchanges/ssr.ts","name":"data","original":{"line":141,"column":12},"generated":{"line":503,"column":48}},{"source":"../src/utils/request.ts","name":"vars","original":{"line":35,"column":9},"generated":{"line":723,"column":11}},{"source":"../src/utils/request.ts","name":"vars","original":{"line":35,"column":9},"generated":{"line":723,"column":18}},{"source":"../src/exchanges/cache.ts","name":"z","original":{"line":106,"column":31},"generated":{"line":767,"column":80}},{"source":"../src/exchanges/cache.ts","name":"z","original":{"line":106,"column":31},"generated":{"line":767,"column":82}},{"source":"../src/exchanges/cache.ts","name":"z","original":{"line":106,"column":31},"generated":{"line":767,"column":85}},{"source":"../src/exchanges/cache.ts","name":"addMetadata","original":{"line":103,"column":16},"generated":{"line":770,"column":15}},{"source":"../src/exchanges/cache.ts","name":"addMetadata","original":{"line":103,"column":16},"generated":{"line":771,"column":10}},{"source":"../src/exchanges/cache.ts","name":"addMetadata","original":{"line":103,"column":16},"generated":{"line":771,"column":11}},{"source":"../src/exchanges/cache.ts","name":"addMetadata","original":{"line":103,"column":16},"generated":{"line":771,"column":14}},{"source":"../src/exchanges/cache.ts","name":"addMetadata","original":{"line":103,"column":16},"generated":{"line":771,"column":15}},{"source":"../src/exchanges/cache.ts","name":"op","original":{"line":100,"column":17},"generated":{"line":772,"column":25}},{"source":"../src/exchanges/cache.ts","name":"op","original":{"line":100,"column":17},"generated":{"line":772,"column":37}}],"sources":{"../src/utils/request.ts":"import { DocumentNode, parse, print } from 'graphql';\nimport { hash, phash } from './hash';\nimport { stringifyVariables } from './stringifyVariables';\nimport { GraphQLRequest, Operation, OperationContext } from '../types';\n\ninterface Documents {\n  [key: number]: DocumentNode;\n}\n\nconst hashQuery = (q: string): number => hash(q.replace(/[\\s,]+/g, ' ').trim());\n\nconst docs: Documents = Object.create(null);\n\nexport const createRequest = (\n  q: string | DocumentNode,\n  vars?: object\n): GraphQLRequest => {\n  let key: number;\n  let query: DocumentNode;\n  if (typeof q === 'string') {\n    key = hashQuery(q);\n    query = docs[key] !== undefined ? docs[key] : parse(q);\n  } else if ((q as any).__key !== undefined) {\n    key = (q as any).__key;\n    query = q;\n  } else {\n    key = hashQuery(print(q));\n    query = docs[key] !== undefined ? docs[key] : q;\n  }\n\n  docs[key] = query;\n  (query as any).__key = key;\n\n  return {\n    key: vars ? phash(key, stringifyVariables(vars)) >>> 0 : key,\n    query,\n    variables: vars || {},\n  };\n};\n\n/** Spreads the provided metadata to the source operation's meta property in context.  */\nexport const addMetadata = (\n  source: Operation,\n  meta: Exclude<OperationContext['meta'], undefined>\n) => ({\n  ...source,\n  context: {\n    ...source.context,\n    meta: {\n      ...source.context.meta,\n      ...meta,\n    },\n  },\n});\n","../src/utils/hash.ts":"// When we have separate strings it's useful to run a progressive\n// version of djb2 where we pretend that we're still looping over\n// the same string\nexport const phash = (h: number, x: string): number => {\n  h = h | 0;\n  for (let i = 0, l = x.length | 0; i < l; i++) {\n    h = (h << 5) + h + x.charCodeAt(i);\n  }\n\n  return h;\n};\n\n// This is a djb2 hashing function\nexport const hash = (x: string): number => phash(5381 | 0, x) >>> 0;\n","../src/utils/typenames.ts":"import {\n  DocumentNode,\n  FieldNode,\n  InlineFragmentNode,\n  SelectionNode,\n  Kind,\n  visit,\n} from 'graphql';\n\ninterface EntityLike {\n  [key: string]: EntityLike | EntityLike[] | any;\n  __typename: string | null | void;\n}\n\nconst collectTypes = (obj: EntityLike | EntityLike[], types: string[] = []) => {\n  if (Array.isArray(obj)) {\n    obj.forEach(inner => {\n      collectTypes(inner, types);\n    });\n  } else if (typeof obj === 'object' && obj !== null) {\n    for (const key in obj) {\n      if (key === '__typename' && typeof obj[key] === 'string') {\n        types.push(obj[key] as string);\n      } else {\n        collectTypes(obj[key], types);\n      }\n    }\n  }\n\n  return types;\n};\n\nexport const collectTypesFromResponse = (response: object) =>\n  collectTypes(response as EntityLike).filter((v, i, a) => a.indexOf(v) === i);\n\nconst formatNode = (node: FieldNode | InlineFragmentNode) => {\n  if (\n    node.selectionSet &&\n    !node.selectionSet.selections.some(\n      node => node.kind === Kind.FIELD && node.name.value === '__typename'\n    )\n  ) {\n    return {\n      ...node,\n      selectionSet: {\n        ...node.selectionSet,\n        selections: [\n          ...(node.selectionSet.selections as SelectionNode[]),\n          {\n            kind: Kind.FIELD,\n            name: {\n              kind: Kind.NAME,\n              value: '__typename',\n            },\n          },\n        ],\n      },\n    };\n  }\n};\n\nexport const formatDocument = (node: DocumentNode): DocumentNode => {\n  const result = visit(node, {\n    Field: formatNode,\n    InlineFragment: formatNode,\n  });\n\n  // Ensure that the hash of the resulting document won't suddenly change\n  result.__key = (node as any).__key;\n  return result;\n};\n","../src/utils/toSuspenseSource.ts":"import { pipe, share, onPush, toPromise, takeWhile, take, Source } from 'wonka';\n\n/** This converts a Source to a suspense Source; It will forward the first result synchronously or throw a promise that resolves when the result becomes available */\nexport const toSuspenseSource = <T>(source: Source<T>): Source<T> => sink => {\n  const shared = share(source);\n  let hasResult = false;\n  let hasSuspended = false;\n\n  pipe(\n    shared,\n    takeWhile(() => !hasSuspended),\n    onPush(() => (hasResult = true))\n  )(sink);\n\n  if (!hasResult) {\n    hasSuspended = true;\n    sink(0); /* End */\n    throw pipe(shared, take(1), toPromise);\n  }\n};\n","../src/utils/maskTypename.ts":"export const maskTypename = (data: any): any => {\n  if (!data || typeof data !== 'object') return data;\n\n  return Object.keys(data).reduce((acc, key: string) => {\n    const value = data[key];\n    if (key === '__typename') {\n      Object.defineProperty(acc, '__typename', {\n        enumerable: false,\n        value,\n      });\n    } else if (Array.isArray(value)) {\n      acc[key] = value.map(maskTypename);\n    } else if (value && typeof value === 'object' && '__typename' in value) {\n      acc[key] = maskTypename(value);\n    } else {\n      acc[key] = value;\n    }\n\n    return acc;\n  }, {});\n};\n","../src/utils/withPromise.ts":"import { Source, pipe, toPromise, take } from 'wonka';\nimport { PromisifiedSource } from '../types';\n\nexport function withPromise<T>(source$: Source<T>): PromisifiedSource<T> {\n  (source$ as PromisifiedSource<T>).toPromise = () =>\n    pipe(source$, take(1), toPromise);\n  return source$ as PromisifiedSource<T>;\n}\n","../src/exchanges/cache.ts":"/* eslint-disable @typescript-eslint/no-use-before-define */\nimport { filter, map, merge, pipe, share, tap } from 'wonka';\n\nimport { Client } from '../client';\nimport { Exchange, Operation, OperationResult, ExchangeInput } from '../types';\nimport {\n  addMetadata,\n  collectTypesFromResponse,\n  formatDocument,\n} from '../utils';\n\ntype ResultCache = Map<number, OperationResult>;\n\ninterface OperationCache {\n  [key: string]: Set<number>;\n}\n\nconst shouldSkip = ({ operationName }: Operation) =>\n  operationName !== 'mutation' && operationName !== 'query';\n\nexport const cacheExchange: Exchange = ({ forward, client, dispatchDebug }) => {\n  const resultCache = new Map() as ResultCache;\n  const operationCache = Object.create(null) as OperationCache;\n\n  // Adds unique typenames to query (for invalidating cache entries)\n  const mapTypeNames = (operation: Operation): Operation => ({\n    ...operation,\n    query: formatDocument(operation.query),\n  });\n\n  const handleAfterMutation = afterMutation(\n    resultCache,\n    operationCache,\n    client,\n    dispatchDebug\n  );\n\n  const handleAfterQuery = afterQuery(resultCache, operationCache);\n\n  const isOperationCached = operation => {\n    const {\n      key,\n      operationName,\n      context: { requestPolicy },\n    } = operation;\n    return (\n      operationName === 'query' &&\n      requestPolicy !== 'network-only' &&\n      (requestPolicy === 'cache-only' || resultCache.has(key))\n    );\n  };\n\n  return ops$ => {\n    const sharedOps$ = share(ops$);\n\n    const cachedOps$ = pipe(\n      sharedOps$,\n      filter(op => !shouldSkip(op) && isOperationCached(op)),\n      map(operation => {\n        const cachedResult = resultCache.get(operation.key);\n\n        dispatchDebug({\n          operation,\n          ...(cachedResult\n            ? {\n                type: 'cacheHit',\n                message: 'The result was successfully retried from the cache',\n              }\n            : {\n                type: 'cacheMiss',\n                message: 'The result could not be retrieved from the cache',\n              }),\n        });\n\n        const result: OperationResult = {\n          ...cachedResult,\n          operation: addMetadata(operation, {\n            cacheOutcome: cachedResult ? 'hit' : 'miss',\n          }),\n        };\n\n        if (operation.context.requestPolicy === 'cache-and-network') {\n          result.stale = true;\n          reexecuteOperation(client, operation);\n        }\n\n        return result;\n      })\n    );\n\n    const forwardedOps$ = pipe(\n      merge([\n        pipe(\n          sharedOps$,\n          filter(op => !shouldSkip(op) && !isOperationCached(op)),\n          map(mapTypeNames)\n        ),\n        pipe(\n          sharedOps$,\n          filter(op => shouldSkip(op))\n        ),\n      ]),\n      map(op => addMetadata(op, { cacheOutcome: 'miss' })),\n      filter(\n        op =>\n          op.operationName !== 'query' ||\n          op.context.requestPolicy !== 'cache-only'\n      ),\n      forward,\n      tap(response => {\n        if (\n          response.operation &&\n          response.operation.operationName === 'mutation'\n        ) {\n          handleAfterMutation(response);\n        } else if (\n          response.operation &&\n          response.operation.operationName === 'query'\n        ) {\n          handleAfterQuery(response);\n        }\n      })\n    );\n\n    return merge([cachedOps$, forwardedOps$]);\n  };\n};\n\n// Reexecutes a given operation with the default requestPolicy\nconst reexecuteOperation = (client: Client, operation: Operation) => {\n  return client.reexecuteOperation({\n    ...operation,\n    context: {\n      ...operation.context,\n      requestPolicy: 'network-only',\n    },\n  });\n};\n\n// Invalidates the cache given a mutation's response\nexport const afterMutation = (\n  resultCache: ResultCache,\n  operationCache: OperationCache,\n  client: Client,\n  dispatchDebug: ExchangeInput['dispatchDebug']\n) => (response: OperationResult) => {\n  const pendingOperations = new Set<number>();\n  const { additionalTypenames } = response.operation.context;\n\n  const typenames = [\n    ...collectTypesFromResponse(response.data),\n    ...(additionalTypenames || []),\n  ];\n\n  dispatchDebug({\n    type: 'cacheInvalidation',\n    message: `The following typenames have been invalidated: ${typenames}`,\n    operation: response.operation,\n    data: { typenames, response },\n  });\n\n  typenames.forEach(typeName => {\n    const operations =\n      operationCache[typeName] || (operationCache[typeName] = new Set());\n    operations.forEach(key => {\n      pendingOperations.add(key);\n    });\n    operations.clear();\n  });\n\n  pendingOperations.forEach(key => {\n    if (resultCache.has(key)) {\n      const operation = (resultCache.get(key) as OperationResult).operation;\n      resultCache.delete(key);\n      reexecuteOperation(client, operation);\n    }\n  });\n};\n\n// Mark typenames on typenameInvalidate for early invalidation\nconst afterQuery = (\n  resultCache: ResultCache,\n  operationCache: OperationCache\n) => (response: OperationResult) => {\n  const { operation, data, error } = response;\n  const { additionalTypenames } = operation.context;\n\n  if (data === undefined || data === null) {\n    return;\n  }\n\n  resultCache.set(operation.key, { operation, data, error });\n\n  [\n    ...collectTypesFromResponse(response.data),\n    ...(additionalTypenames || []),\n  ].forEach(typeName => {\n    const operations =\n      operationCache[typeName] || (operationCache[typeName] = new Set());\n    operations.add(operation.key);\n  });\n};\n","../src/exchanges/debug.ts":"import { pipe, tap } from 'wonka';\nimport { Exchange } from '../types';\n\nexport const debugExchange: Exchange = ({ forward }) => {\n  if (process.env.NODE_ENV === 'production') {\n    return ops$ => forward(ops$);\n  } else {\n    return ops$ =>\n      pipe(\n        ops$,\n        // eslint-disable-next-line no-console\n        tap(op => console.log('[Exchange debug]: Incoming operation: ', op)),\n        forward,\n        tap(result =>\n          // eslint-disable-next-line no-console\n          console.log('[Exchange debug]: Completed operation: ', result)\n        )\n      );\n  }\n};\n","../src/exchanges/dedup.ts":"import { filter, pipe, tap } from 'wonka';\nimport { Exchange, Operation, OperationResult } from '../types';\n\n/** A default exchange for debouncing GraphQL requests. */\nexport const dedupExchange: Exchange = ({ forward, dispatchDebug }) => {\n  const inFlightKeys = new Set<number>();\n\n  const filterIncomingOperation = (operation: Operation) => {\n    const { key, operationName } = operation;\n    if (operationName === 'teardown') {\n      inFlightKeys.delete(key);\n      return true;\n    }\n\n    if (operationName !== 'query' && operationName !== 'subscription') {\n      return true;\n    }\n\n    const isInFlight = inFlightKeys.has(key);\n    inFlightKeys.add(key);\n\n    if (isInFlight) {\n      dispatchDebug({\n        type: 'dedup',\n        message: 'An operation has been deduped.',\n        operation,\n      });\n    }\n\n    return !isInFlight;\n  };\n\n  const afterOperationResult = ({ operation }: OperationResult) => {\n    inFlightKeys.delete(operation.key);\n  };\n\n  return ops$ => {\n    const forward$ = pipe(ops$, filter(filterIncomingOperation));\n    return pipe(forward(forward$), tap(afterOperationResult));\n  };\n};\n","../src/exchanges/fetch.ts":"/* eslint-disable @typescript-eslint/no-use-before-define */\nimport { filter, merge, mergeMap, pipe, share, takeUntil, onPush } from 'wonka';\n\nimport { Exchange } from '../types';\nimport {\n  makeFetchBody,\n  makeFetchURL,\n  makeFetchOptions,\n  makeFetchSource,\n} from '../internal';\n\n/** A default exchange for fetching GraphQL requests. */\nexport const fetchExchange: Exchange = ({ forward, dispatchDebug }) => {\n  return ops$ => {\n    const sharedOps$ = share(ops$);\n    const fetchResults$ = pipe(\n      sharedOps$,\n      filter(operation => {\n        return (\n          operation.operationName === 'query' ||\n          operation.operationName === 'mutation'\n        );\n      }),\n      mergeMap(operation => {\n        const { key } = operation;\n        const teardown$ = pipe(\n          sharedOps$,\n          filter(op => op.operationName === 'teardown' && op.key === key)\n        );\n\n        const body = makeFetchBody(operation);\n        const url = makeFetchURL(operation, body);\n        const fetchOptions = makeFetchOptions(operation, body);\n\n        dispatchDebug({\n          type: 'fetchRequest',\n          message: 'A fetch request is being executed.',\n          operation,\n          data: {\n            url,\n            fetchOptions,\n          },\n        });\n\n        return pipe(\n          makeFetchSource(operation, url, fetchOptions),\n          takeUntil(teardown$),\n          onPush(result => {\n            const error = !result.data ? result.error : undefined;\n\n            dispatchDebug({\n              type: error ? 'fetchError' : 'fetchSuccess',\n              message: `A ${\n                error ? 'failed' : 'successful'\n              } fetch response has been returned.`,\n              operation,\n              data: {\n                url,\n                fetchOptions,\n                value: error || result,\n              },\n            });\n          })\n        );\n      })\n    );\n\n    const forward$ = pipe(\n      sharedOps$,\n      filter(operation => {\n        return (\n          operation.operationName !== 'query' &&\n          operation.operationName !== 'mutation'\n        );\n      }),\n      forward\n    );\n\n    return merge([fetchResults$, forward$]);\n  };\n};\n","../src/exchanges/fallback.ts":"import { filter, pipe, tap } from 'wonka';\nimport { Operation, ExchangeIO, ExchangeInput } from '../types';\nimport { noop } from '../utils';\n\n/** This is always the last exchange in the chain; No operation should ever reach it */\nexport const fallbackExchange: ({\n  dispatchDebug,\n}: Pick<ExchangeInput, 'dispatchDebug'>) => ExchangeIO = ({\n  dispatchDebug,\n}) => ops$ =>\n  pipe(\n    ops$,\n    tap<Operation>(operation => {\n      if (\n        operation.operationName !== 'teardown' &&\n        process.env.NODE_ENV !== 'production'\n      ) {\n        const message = `No exchange has handled operations of type \"${operation.operationName}\". Check whether you've added an exchange responsible for these operations.`;\n\n        dispatchDebug({\n          type: 'fallbackCatch',\n          message,\n          operation,\n        });\n        console.warn(message);\n      }\n    }),\n    /* All operations that skipped through the entire exchange chain should be filtered from the output */\n    filter<any>(() => false)\n  );\n\nexport const fallbackExchangeIO: ExchangeIO = fallbackExchange({\n  dispatchDebug: noop,\n});\n","../src/exchanges/compose.ts":"import { Exchange, ExchangeInput } from '../types';\n\n/** This composes an array of Exchanges into a single ExchangeIO function */\nexport const composeExchanges = (exchanges: Exchange[]) => ({\n  client,\n  forward,\n  dispatchDebug,\n}: ExchangeInput) =>\n  exchanges.reduceRight(\n    (forward, exchange) =>\n      exchange({\n        client,\n        forward,\n        dispatchDebug(event) {\n          dispatchDebug({\n            timestamp: Date.now(),\n            source: exchange.name,\n            ...event,\n          });\n        },\n      }),\n    forward\n  );\n","../src/exchanges/index.ts":"export { ssrExchange } from './ssr';\nexport { cacheExchange } from './cache';\nexport { subscriptionExchange } from './subscription';\nexport { debugExchange } from './debug';\nexport { dedupExchange } from './dedup';\nexport { fetchExchange } from './fetch';\nexport { fallbackExchangeIO } from './fallback';\nexport { composeExchanges } from './compose';\n\nimport { cacheExchange } from './cache';\nimport { dedupExchange } from './dedup';\nimport { fetchExchange } from './fetch';\n\nexport const defaultExchanges = [dedupExchange, cacheExchange, fetchExchange];\n","../src/client.ts":"/* eslint-disable @typescript-eslint/no-use-before-define */\n\nimport {\n  filter,\n  makeSubject,\n  onEnd,\n  onStart,\n  pipe,\n  share,\n  Source,\n  take,\n  takeUntil,\n  merge,\n  interval,\n  fromValue,\n  switchMap,\n  publish,\n  subscribe,\n  map,\n  Subscription,\n} from 'wonka';\n\nimport { composeExchanges, defaultExchanges } from './exchanges';\nimport { fallbackExchange } from './exchanges/fallback';\n\nimport {\n  Exchange,\n  ExchangeInput,\n  GraphQLRequest,\n  Operation,\n  OperationContext,\n  OperationResult,\n  OperationType,\n  RequestPolicy,\n  PromisifiedSource,\n  DebugEvent,\n} from './types';\n\nimport {\n  createRequest,\n  toSuspenseSource,\n  withPromise,\n  maskTypename,\n  noop,\n} from './utils';\n\nimport { DocumentNode } from 'graphql';\n\n/** Options for configuring the URQL [client]{@link Client}. */\nexport interface ClientOptions {\n  /** Target endpoint URL such as `https://my-target:8080/graphql`. */\n  url: string;\n  /** Any additional options to pass to fetch. */\n  fetchOptions?: RequestInit | (() => RequestInit);\n  /** An alternative fetch implementation. */\n  fetch?: typeof fetch;\n  /** An ordered array of Exchanges. */\n  exchanges?: Exchange[];\n  /** Activates support for Suspense. */\n  suspense?: boolean;\n  /** The default request policy for requests. */\n  requestPolicy?: RequestPolicy;\n  /** Use HTTP GET for queries. */\n  preferGetMethod?: boolean;\n  /** Mask __typename from results. */\n  maskTypename?: boolean;\n}\n\ninterface ActiveOperations {\n  [operationKey: string]: number;\n}\n\nexport const createClient = (opts: ClientOptions) => new Client(opts);\n\n/** The URQL application-wide client library. Each execute method starts a GraphQL request and returns a stream of results. */\nexport class Client {\n  /** Start an operation from an exchange */\n  reexecuteOperation: (operation: Operation) => void;\n\n  // Event target for monitoring\n  subscribeToDebugTarget?: (onEvent: (e: DebugEvent) => void) => Subscription;\n\n  // These are variables derived from ClientOptions\n  url: string;\n  fetch?: typeof fetch;\n  fetchOptions?: RequestInit | (() => RequestInit);\n  suspense: boolean;\n  preferGetMethod: boolean;\n  requestPolicy: RequestPolicy;\n  maskTypename: boolean;\n\n  // These are internals to be used to keep track of operations\n  dispatchOperation: (operation?: Operation | void) => void;\n  operations$: Source<Operation>;\n  results$: Source<OperationResult>;\n  activeOperations = Object.create(null) as ActiveOperations;\n  queue: Operation[] = [];\n\n  constructor(opts: ClientOptions) {\n    if (process.env.NODE_ENV !== 'production' && !opts.url) {\n      throw new Error('You are creating an urql-client without a url.');\n    }\n\n    let dispatchDebug: ExchangeInput['dispatchDebug'] = noop;\n    if (process.env.NODE_ENV !== 'production') {\n      const { next, source } = makeSubject<DebugEvent>();\n      this.subscribeToDebugTarget = (onEvent: (e: DebugEvent) => void) =>\n        pipe(source, subscribe(onEvent));\n      dispatchDebug = next as ExchangeInput['dispatchDebug'];\n    }\n\n    this.url = opts.url;\n    this.fetchOptions = opts.fetchOptions;\n    this.fetch = opts.fetch;\n    this.suspense = !!opts.suspense;\n    this.requestPolicy = opts.requestPolicy || 'cache-first';\n    this.preferGetMethod = !!opts.preferGetMethod;\n    this.maskTypename = !!opts.maskTypename;\n\n    // This subject forms the input of operations; executeOperation may be\n    // called to dispatch a new operation on the subject\n    const { source: operations$, next: nextOperation } = makeSubject<\n      Operation\n    >();\n    this.operations$ = operations$;\n\n    let isOperationBatchActive = false;\n    this.dispatchOperation = (operation?: Operation | void) => {\n      isOperationBatchActive = true;\n      if (operation) nextOperation(operation);\n      while ((operation = this.queue.shift())) nextOperation(operation);\n      isOperationBatchActive = false;\n    };\n\n    this.reexecuteOperation = (operation: Operation) => {\n      // Reexecute operation only if any subscribers are still subscribed to the\n      // operation's exchange results\n      if ((this.activeOperations[operation.key] || 0) > 0) {\n        this.queue.push(operation);\n        if (!isOperationBatchActive) {\n          Promise.resolve().then(this.dispatchOperation);\n        }\n      }\n    };\n\n    const exchanges =\n      opts.exchanges !== undefined ? opts.exchanges : defaultExchanges;\n\n    // All exchange are composed into a single one and are called using the constructed client\n    // and the fallback exchange stream\n    const composedExchange = composeExchanges(exchanges);\n\n    // All exchanges receive inputs using which they can forward operations to the next exchange\n    // and receive a stream of results in return, access the client, or dispatch debugging events\n    // All operations then run through the Exchange IOs in a pipeline-like fashion\n    this.results$ = share(\n      composedExchange({\n        client: this,\n        dispatchDebug,\n        forward: fallbackExchange({ dispatchDebug }),\n      })(this.operations$)\n    );\n\n    // Prevent the `results$` exchange pipeline from being closed by active\n    // cancellations cascading up from components\n    pipe(this.results$, publish);\n  }\n\n  private createOperationContext = (\n    opts?: Partial<OperationContext>\n  ): OperationContext => ({\n    url: this.url,\n    fetchOptions: this.fetchOptions,\n    fetch: this.fetch,\n    preferGetMethod: this.preferGetMethod,\n    ...opts,\n    requestPolicy: (opts || {}).requestPolicy || this.requestPolicy,\n  });\n\n  createRequestOperation = (\n    type: OperationType,\n    request: GraphQLRequest,\n    opts?: Partial<OperationContext>\n  ): Operation => ({\n    key: request.key,\n    query: request.query,\n    variables: request.variables,\n    operationName: type,\n    context: this.createOperationContext(opts),\n  });\n\n  /** Counts up the active operation key and dispatches the operation */\n  private onOperationStart(operation: Operation) {\n    const { key } = operation;\n    this.activeOperations[key] = (this.activeOperations[key] || 0) + 1;\n    this.dispatchOperation(operation);\n  }\n\n  /** Deletes an active operation's result observable and sends a teardown signal through the exchange pipeline */\n  private onOperationEnd(operation: Operation) {\n    const { key } = operation;\n    const prevActive = this.activeOperations[key] || 0;\n    const newActive = (this.activeOperations[key] =\n      prevActive <= 0 ? 0 : prevActive - 1);\n\n    if (newActive <= 0) {\n      this.dispatchOperation({ ...operation, operationName: 'teardown' });\n    }\n  }\n\n  /** Executes an Operation by sending it through the exchange pipeline It returns an observable that emits all related exchange results and keeps track of this observable's subscribers. A teardown signal will be emitted when no subscribers are listening anymore. */\n  executeRequestOperation(operation: Operation): Source<OperationResult> {\n    const { key, operationName } = operation;\n    let operationResults$ = pipe(\n      this.results$,\n      filter((res: OperationResult) => res.operation.key === key)\n    );\n\n    if (this.maskTypename) {\n      operationResults$ = pipe(\n        operationResults$,\n        map(res => {\n          res.data = maskTypename(res.data);\n          return res;\n        })\n      );\n    }\n\n    if (operationName === 'mutation') {\n      // A mutation is always limited to just a single result and is never shared\n      return pipe(\n        operationResults$,\n        onStart<OperationResult>(() => this.dispatchOperation(operation)),\n        take(1)\n      );\n    }\n\n    const teardown$ = pipe(\n      this.operations$,\n      filter(\n        (op: Operation) => op.operationName === 'teardown' && op.key === key\n      )\n    );\n\n    const result$ = pipe(\n      operationResults$,\n      takeUntil(teardown$),\n      onStart<OperationResult>(() => {\n        this.onOperationStart(operation);\n      }),\n      onEnd<OperationResult>(() => {\n        this.onOperationEnd(operation);\n      })\n    );\n\n    return operation.context.suspense !== false &&\n      this.suspense &&\n      operationName === 'query'\n      ? toSuspenseSource<OperationResult>(result$ as Source<OperationResult>)\n      : (result$ as Source<OperationResult>);\n  }\n\n  query<Data = any, Variables extends object = {}>(\n    query: DocumentNode | string,\n    variables?: Variables,\n    context?: Partial<OperationContext>\n  ): PromisifiedSource<OperationResult<Data>> {\n    if (!context || typeof context.suspense !== 'boolean') {\n      context = { ...context, suspense: false };\n    }\n\n    return withPromise<OperationResult<Data>>(\n      this.executeQuery(createRequest(query, variables), context)\n    );\n  }\n\n  readQuery<Data = any, Variables extends object = {}>(\n    query: DocumentNode | string,\n    variables?: Variables,\n    context?: Partial<OperationContext>\n  ): OperationResult<Data> | null {\n    let result: OperationResult<Data> | null = null;\n\n    pipe(\n      this.executeQuery(createRequest(query, variables), context),\n      subscribe(res => {\n        result = res;\n      })\n    ).unsubscribe();\n\n    return result;\n  }\n\n  executeQuery = <Data = any>(\n    query: GraphQLRequest,\n    opts?: Partial<OperationContext>\n  ): Source<OperationResult<Data>> => {\n    const operation = this.createRequestOperation('query', query, opts);\n    const response$ = this.executeRequestOperation(operation);\n    const { pollInterval } = operation.context;\n\n    if (pollInterval) {\n      return pipe(\n        merge([fromValue(0), interval(pollInterval)]),\n        switchMap(() => response$)\n      );\n    }\n\n    return response$;\n  };\n\n  subscription<Data = any, Variables extends object = {}>(\n    query: DocumentNode | string,\n    variables?: Variables,\n    context?: Partial<OperationContext>\n  ): Source<OperationResult<Data>> {\n    return this.executeSubscription(createRequest(query, variables), context);\n  }\n\n  executeSubscription = (\n    query: GraphQLRequest,\n    opts?: Partial<OperationContext>\n  ): Source<OperationResult> => {\n    const operation = this.createRequestOperation('subscription', query, opts);\n    return this.executeRequestOperation(operation);\n  };\n\n  mutation<Data = any, Variables extends object = {}>(\n    query: DocumentNode | string,\n    variables?: Variables,\n    context?: Partial<OperationContext>\n  ): PromisifiedSource<OperationResult<Data>> {\n    return withPromise<OperationResult<Data>>(\n      this.executeMutation(createRequest(query, variables), context)\n    );\n  }\n\n  executeMutation = <Data = any>(\n    query: GraphQLRequest,\n    opts?: Partial<OperationContext>\n  ): Source<OperationResult<Data>> => {\n    const operation = this.createRequestOperation('mutation', query, opts);\n    return this.executeRequestOperation(operation);\n  };\n}\n","../src/exchanges/ssr.ts":"import { GraphQLError } from 'graphql';\nimport { pipe, share, filter, merge, map, tap } from 'wonka';\nimport { Exchange, OperationResult, Operation } from '../types';\nimport { CombinedError } from '../utils';\n\nexport interface SerializedResult {\n  data?: any;\n  error?: {\n    graphQLErrors: Array<Partial<GraphQLError> | string>;\n    networkError?: string;\n  };\n}\n\nexport interface SSRData {\n  [key: string]: SerializedResult;\n}\n\nexport interface SSRExchangeParams {\n  isClient?: boolean;\n  initialState?: SSRData;\n}\n\nexport interface SSRExchange extends Exchange {\n  /** Rehydrates cached data */\n  restoreData(data: SSRData): void;\n  /** Extracts cached data */\n  extractData(): SSRData;\n}\n\nconst shouldSkip = ({ operationName }: Operation) =>\n  operationName !== 'subscription' && operationName !== 'query';\n\n/** Serialize an OperationResult to plain JSON */\nconst serializeResult = ({\n  data,\n  error,\n}: OperationResult): SerializedResult => {\n  const result: SerializedResult = { data, error: undefined };\n  if (error) {\n    result.error = {\n      graphQLErrors: error.graphQLErrors.map(error => {\n        if (!error.path && !error.extensions) return error.message;\n\n        return {\n          message: error.message,\n          path: error.path,\n          extensions: error.extensions,\n        };\n      }),\n      networkError: error.networkError ? '' + error.networkError : undefined,\n    };\n  }\n\n  return result;\n};\n\n/** Deserialize plain JSON to an OperationResult */\nconst deserializeResult = (\n  operation: Operation,\n  result: SerializedResult\n): OperationResult => {\n  const { error, data } = result;\n  const deserialized: OperationResult = {\n    operation,\n    data,\n    extensions: undefined,\n    error: error\n      ? new CombinedError({\n          networkError: error.networkError\n            ? new Error(error.networkError)\n            : undefined,\n          graphQLErrors:\n            error.graphQLErrors && error.graphQLErrors.length\n              ? error.graphQLErrors\n              : undefined,\n        })\n      : undefined,\n  };\n\n  return deserialized;\n};\n\n/** The ssrExchange can be created to capture data during SSR and also to rehydrate it on the client */\nexport const ssrExchange = (params?: SSRExchangeParams): SSRExchange => {\n  const data: SSRData = {};\n\n  // On the client-side, we delete results from the cache as they're resolved\n  // this is delayed so that concurrent queries don't delete each other's data\n  const invalidateQueue: number[] = [];\n  const invalidate = (result: OperationResult) => {\n    invalidateQueue.push(result.operation.key);\n    if (invalidateQueue.length === 1) {\n      Promise.resolve().then(() => {\n        let key: number | void;\n        while ((key = invalidateQueue.shift())) delete data[key];\n      });\n    }\n  };\n\n  const isCached = (operation: Operation) => {\n    return !shouldSkip(operation) && data[operation.key] !== undefined;\n  };\n\n  // The SSR Exchange is a temporary cache that can populate results into data for suspense\n  // On the client it can be used to retrieve these temporary results from a rehydrated cache\n  const ssr: SSRExchange = ({ client, forward }) => ops$ => {\n    // params.isClient tells us whether we're on the client-side\n    // By default we assume that we're on the client if suspense-mode is disabled\n    const isClient =\n      params && typeof params.isClient === 'boolean'\n        ? !!params.isClient\n        : !client.suspense;\n\n    const sharedOps$ = share(ops$);\n\n    let forwardedOps$ = pipe(\n      sharedOps$,\n      filter(op => !isCached(op)),\n      forward\n    );\n\n    // NOTE: Since below we might delete the cached entry after accessing\n    // it once, cachedOps$ needs to be merged after forwardedOps$\n    let cachedOps$ = pipe(\n      sharedOps$,\n      filter(op => isCached(op)),\n      map(op => {\n        const serialized = data[op.key];\n        return deserializeResult(op, serialized);\n      })\n    );\n\n    if (!isClient) {\n      // On the server we cache results in the cache as they're resolved\n      forwardedOps$ = pipe(\n        forwardedOps$,\n        tap((result: OperationResult) => {\n          const { operation } = result;\n          if (!shouldSkip(operation)) {\n            const serialized = serializeResult(result);\n            data[operation.key] = serialized;\n          }\n        })\n      );\n    } else {\n      // On the client we delete results from the cache as they're resolved\n      cachedOps$ = pipe(cachedOps$, tap(invalidate));\n    }\n\n    return merge([forwardedOps$, cachedOps$]);\n  };\n\n  ssr.restoreData = (restore: SSRData) => Object.assign(data, restore);\n  ssr.extractData = () => Object.assign({}, data);\n\n  if (params && params.initialState) {\n    ssr.restoreData(params.initialState);\n  }\n\n  return ssr;\n};\n","../src/exchanges/subscription.ts":"import { print } from 'graphql';\n\nimport {\n  filter,\n  make,\n  merge,\n  mergeMap,\n  pipe,\n  share,\n  Source,\n  takeUntil,\n} from 'wonka';\n\nimport { makeResult, makeErrorResult } from '../utils';\n\nimport {\n  Exchange,\n  ExecutionResult,\n  Operation,\n  OperationContext,\n  OperationResult,\n} from '../types';\n\nexport interface ObserverLike<T> {\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\n/** An abstract observable interface conforming to: https://github.com/tc39/proposal-observable */\nexport interface ObservableLike<T> {\n  subscribe(\n    observer: ObserverLike<T>\n  ): {\n    unsubscribe: () => void;\n  };\n}\n\nexport interface SubscriptionOperation {\n  query: string;\n  variables?: object;\n  key: string;\n  context: OperationContext;\n}\n\nexport type SubscriptionForwarder = (\n  operation: SubscriptionOperation\n) => ObservableLike<ExecutionResult & { extensions?: Record<string, any> }>;\n\n/** This is called to create a subscription and needs to be hooked up to a transport client. */\nexport interface SubscriptionExchangeOpts {\n  // This has been modelled to work with subscription-transport-ws\n  // See: https://github.com/apollographql/subscriptions-transport-ws#requestoptions--observableexecutionresult-returns-observable-to-execute-the-operation\n  forwardSubscription: SubscriptionForwarder;\n\n  /** This flag may be turned on to allow your subscriptions-transport to handle all operation types */\n  enableAllOperations?: boolean;\n}\n\nexport const subscriptionExchange = ({\n  forwardSubscription,\n  enableAllOperations,\n}: SubscriptionExchangeOpts): Exchange => ({ client, forward }) => {\n  const createSubscriptionSource = (\n    operation: Operation\n  ): Source<OperationResult> => {\n    // This excludes the query's name as a field although subscription-transport-ws does accept it since it's optional\n    const observableish = forwardSubscription({\n      key: operation.key.toString(36),\n      query: print(operation.query),\n      variables: operation.variables,\n      context: { ...operation.context },\n    });\n\n    return make<OperationResult>(({ next, complete }) => {\n      let isComplete = false;\n      let sub;\n\n      Promise.resolve().then(() => {\n        if (isComplete) return;\n\n        sub = observableish.subscribe({\n          next: result => next(makeResult(operation, result)),\n          error: err => next(makeErrorResult(operation, err)),\n          complete: () => {\n            if (!isComplete) {\n              isComplete = true;\n              if (operation.operationName === 'subscription') {\n                client.reexecuteOperation({\n                  ...operation,\n                  operationName: 'teardown',\n                });\n              }\n\n              complete();\n            }\n          },\n        });\n      });\n\n      return () => {\n        isComplete = true;\n        if (sub) sub.unsubscribe();\n      };\n    });\n  };\n\n  const isSubscriptionOperation = (operation: Operation): boolean => {\n    const { operationName } = operation;\n    return (\n      operationName === 'subscription' ||\n      (!!enableAllOperations &&\n        (operationName === 'query' || operationName === 'mutation'))\n    );\n  };\n\n  return ops$ => {\n    const sharedOps$ = share(ops$);\n    const subscriptionResults$ = pipe(\n      sharedOps$,\n      filter(isSubscriptionOperation),\n      mergeMap(operation => {\n        const { key } = operation;\n        const teardown$ = pipe(\n          sharedOps$,\n          filter(op => op.operationName === 'teardown' && op.key === key)\n        );\n\n        return pipe(createSubscriptionSource(operation), takeUntil(teardown$));\n      })\n    );\n\n    const forward$ = pipe(\n      sharedOps$,\n      filter(op => !isSubscriptionOperation(op)),\n      forward\n    );\n\n    return merge([subscriptionResults$, forward$]);\n  };\n};\n"},"lineCount":null}},"error":null,"hash":"856fb9f96de58093a172aab3aa6498d2","cacheData":{"env":{"NODE_ENV":"development"}}}