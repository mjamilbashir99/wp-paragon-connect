{"id":"node_modules/@aragon/connect-core/dist/utils/forwarding.js","dependencies":[{"name":"C:\\xampp\\htdocs\\aragon-connect\\node_modules\\@aragon\\connect-core\\dist\\utils\\forwarding.js.map","includedInParent":true,"mtime":1594248789000},{"name":"C:\\xampp\\htdocs\\aragon-connect\\package.json","includedInParent":true,"mtime":1595855422975},{"name":"C:\\xampp\\htdocs\\aragon-connect\\node_modules\\@aragon\\connect-core\\package.json","includedInParent":true,"mtime":1595838173215},{"name":"ethers","loc":{"line":4,"column":25},"parent":"C:\\xampp\\htdocs\\aragon-connect\\node_modules\\@aragon\\connect-core\\dist\\utils\\forwarding.js","resolved":"C:\\xampp\\htdocs\\aragon-connect\\node_modules\\ethers\\dist\\ethers.umd.js"},{"name":"./abis","loc":{"line":5,"column":23},"parent":"C:\\xampp\\htdocs\\aragon-connect\\node_modules\\@aragon\\connect-core\\dist\\utils\\forwarding.js","resolved":"C:\\xampp\\htdocs\\aragon-connect\\node_modules\\@aragon\\connect-core\\dist\\utils\\abis.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.canForward = exports.parseForwardCall = exports.isValidForwardCall = exports.FORWARD_SIG = void 0;\nconst ethers_1 = require(\"ethers\");\nconst abis_1 = require(\"./abis\");\nexports.FORWARD_SIG = '0xd948d468'; // function forward(bytes)\n/**\n * Tells if the given calldata (as a bytes string) is a valid invocation of\n * `forward(bytes)`.\n *\n * It will return true only if the given calldata starts with the forward\n * function signature and follows with at least an empty bytes array properly\n * ABI encoded following the convention [offset][length][data].\n *\n * @param {string} calldata Calldata encoded as an array of bytes\n */\nfunction isValidForwardCall(calldata) {\n    // Drop the 0x starting notation if there is one\n    calldata = calldata.replace(/^0x/, '');\n    // First 4 bytes represent the function selector\n    const selector = calldata.substring(0, 8);\n    // Drop selector and grab the argument data\n    const evmscriptData = calldata.substring(8);\n    // Since arrays of bytes are encoded following the [offset][length][data]\n    // format, we expect it to have at least two words length (empty data scenario)\n    return `0x${selector}` === exports.FORWARD_SIG && evmscriptData.length >= 128;\n}\nexports.isValidForwardCall = isValidForwardCall;\n/**\n * Parse the evmscript of a forward call following the byte ABI encoding\n * convention [offset][length][data].\n *\n * @param {string} calldata Calldata encoded as an array of bytes\n * @returns {string} Array of bytes representing the forwarded evmscript\n */\nfunction parseForwardCall(calldata) {\n    // Drop the 0x starting notation if there is one\n    calldata = calldata.replace(/^0x/, '');\n    // Drop function selector and grab the argument data (of type bytes)\n    const evmscriptData = calldata.substring(8);\n    // Parse first word of the bytes array to get data offset\n    // (it's stored as bytes so we need to parse in hex first and then multiply by 2)\n    const offset = parseInt(`0x${evmscriptData.substring(0, 64)}`, 16) * 2;\n    // The first word in the data is its length (uint256); actual data starts after\n    const startIndex = offset + 64;\n    // Parse length of the data stored\n    // (it's stored as bytes so we need to parse in hex first and then multiply by 2)\n    const dataLength = parseInt(`0x${evmscriptData.substring(offset, startIndex)}`, 16) * 2;\n    // Grab the data stored in the bytes array\n    return `0x${evmscriptData.substring(startIndex, startIndex + dataLength)}`;\n}\nexports.parseForwardCall = parseForwardCall;\n/**\n * Whether the `sender` can use the `forwarder` to invoke `script`.\n */\nfunction canForward(forwarderAddress, sender, script, provider) {\n    // Check if a token approval pretransaction is needed due to the forwarder requiring a fee\n    const forwarder = new ethers_1.ethers.Contract(forwarderAddress, abis_1.forwarderAbi, provider);\n    return forwarder.canForward(sender, script).catch(() => false);\n}\nexports.canForward = canForward;\n"},"sourceMaps":{"js":{"version":3,"file":"forwarding.js","sourceRoot":"","sources":["../../src/utils/forwarding.ts"],"names":[],"mappings":";;;AAAA,mCAA+B;AAE/B,iCAAqC;AAExB,QAAA,WAAW,GAAG,YAAY,CAAA,CAAC,0BAA0B;AAElE;;;;;;;;;GASG;AACH,SAAgB,kBAAkB,CAAC,QAAgB;IACjD,gDAAgD;IAChD,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAA;IACtC,gDAAgD;IAChD,MAAM,QAAQ,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;IACzC,2CAA2C;IAC3C,MAAM,aAAa,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAA;IAC3C,yEAAyE;IACzE,+EAA+E;IAC/E,OAAO,KAAK,QAAQ,EAAE,KAAK,mBAAW,IAAI,aAAa,CAAC,MAAM,IAAI,GAAG,CAAA;AACvE,CAAC;AAVD,gDAUC;AAED;;;;;;GAMG;AACH,SAAgB,gBAAgB,CAAC,QAAgB;IAC/C,gDAAgD;IAChD,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAA;IACtC,oEAAoE;IACpE,MAAM,aAAa,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAA;IAC3C,yDAAyD;IACzD,iFAAiF;IACjF,MAAM,MAAM,GAAG,QAAQ,CAAC,KAAK,aAAa,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,CAAC,CAAA;IACtE,+EAA+E;IAC/E,MAAM,UAAU,GAAG,MAAM,GAAG,EAAE,CAAA;IAC9B,kCAAkC;IAClC,iFAAiF;IACjF,MAAM,UAAU,GACd,QAAQ,CAAC,KAAK,aAAa,CAAC,SAAS,CAAC,MAAM,EAAE,UAAU,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,CAAC,CAAA;IACtE,0CAA0C;IAC1C,OAAO,KAAK,aAAa,CAAC,SAAS,CAAC,UAAU,EAAE,UAAU,GAAG,UAAU,CAAC,EAAE,CAAA;AAC5E,CAAC;AAhBD,4CAgBC;AAED;;GAEG;AACH,SAAgB,UAAU,CACxB,gBAAwB,EACxB,MAAc,EACd,MAAc,EACd,QAAmC;IAEnC,0FAA0F;IAC1F,MAAM,SAAS,GAAG,IAAI,eAAM,CAAC,QAAQ,CACnC,gBAAgB,EAChB,mBAAY,EACZ,QAAQ,CACT,CAAA;IAED,OAAO,SAAS,CAAC,UAAU,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,CAAA;AAChE,CAAC;AAdD,gCAcC","sourcesContent":[null]}},"error":null,"hash":"95ef280d6b9748657400939d0aeee4ed","cacheData":{"env":{}}}