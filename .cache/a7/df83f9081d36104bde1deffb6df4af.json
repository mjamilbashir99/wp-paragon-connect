{"id":"node_modules/@aragon/connect-core/dist/utils/radspec/postprocess.js","dependencies":[{"name":"C:\\xampp\\htdocs\\test_wp\\node_modules\\@aragon\\connect-core\\dist\\utils\\radspec\\postprocess.js.map","includedInParent":true,"mtime":1594248789000},{"name":"C:\\xampp\\htdocs\\test_wp\\package.json","includedInParent":true,"mtime":1595855422975},{"name":"C:\\xampp\\htdocs\\test_wp\\node_modules\\@aragon\\connect-core\\package.json","includedInParent":true,"mtime":1595838173215},{"name":"../address","loc":{"line":4,"column":26},"parent":"C:\\xampp\\htdocs\\test_wp\\node_modules\\@aragon\\connect-core\\dist\\utils\\radspec\\postprocess.js","resolved":"C:\\xampp\\htdocs\\test_wp\\node_modules\\@aragon\\connect-core\\dist\\utils\\address.js"},{"name":"../kernel","loc":{"line":5,"column":25},"parent":"C:\\xampp\\htdocs\\test_wp\\node_modules\\@aragon\\connect-core\\dist\\utils\\radspec\\postprocess.js","resolved":"C:\\xampp\\htdocs\\test_wp\\node_modules\\@aragon\\connect-core\\dist\\utils\\kernel.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.postprocessRadspecDescription = void 0;\nconst address_1 = require(\"../address\");\nconst kernel_1 = require(\"../kernel\");\n/**\n * Look for known addresses and roles in a radspec description and substitute them with a human string\n *\n * @param  {string} description\n * @return {Promise<Object>} Description and annotated description\n */\nasync function postprocessRadspecDescription(description, apps) {\n    const addressRegexStr = '0x[a-fA-F0-9]{40}';\n    const addressRegex = new RegExp(`^${addressRegexStr}$`);\n    const bytes32RegexStr = '0x[a-f0-9]{64}';\n    const bytes32Regex = new RegExp(`^${bytes32RegexStr}$`);\n    const combinedRegex = new RegExp(`\\\\b(${addressRegexStr}|${bytes32RegexStr})\\\\b`);\n    const tokens = description\n        .split(combinedRegex)\n        .map(token => token.trim())\n        .filter(token => token);\n    if (tokens.length < 1) {\n        return { description };\n    }\n    const roles = [];\n    for (const app of apps) {\n        const appRoles = await app.roles();\n        roles.concat(appRoles);\n    }\n    const annotateAddress = (input) => {\n        if (address_1.addressesEqual(input, address_1.ANY_ENTITY)) {\n            return [\n                input,\n                '\"Any account\"',\n                { type: 'any-account', value: address_1.ANY_ENTITY },\n            ];\n        }\n        const app = apps.find(({ address }) => address_1.addressesEqual(address, input));\n        if (app) {\n            const replacement = `${app.name}${app.appId ? ` (${app.appId})` : ''}`;\n            return [input, `“${replacement}”`, { type: 'app', value: app }];\n        }\n        return [input, input, { type: 'address', value: input }];\n    };\n    const annotateBytes32 = (input) => {\n        const role = roles.find(({ hash }) => hash === input);\n        if (role && role.name) {\n            return [input, `“${role.name}”`, { type: 'role', value: role }];\n        }\n        const app = apps.find(({ appId }) => appId === input);\n        if (app) {\n            // return the entire app as it contains APM package details\n            return [input, `“${app.appName}”`, { type: 'apmPackage', value: app }];\n        }\n        const namespace = kernel_1.getKernelNamespace(input);\n        if (namespace) {\n            return [\n                input,\n                `“${namespace.name}”`,\n                { type: 'kernelNamespace', value: namespace },\n            ];\n        }\n        return [input, input, { type: 'bytes32', value: input }];\n    };\n    const annotateText = (input) => {\n        return [input, input, { type: 'text', value: input }];\n    };\n    const annotatedTokens = tokens.map(token => {\n        if (addressRegex.test(token)) {\n            return annotateAddress(token);\n        }\n        if (bytes32Regex.test(token)) {\n            return annotateBytes32(token);\n        }\n        return annotateText(token);\n    });\n    const compiled = annotatedTokens.reduce(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    (acc, [_, replacement, annotation]) => {\n        acc.description.push(replacement);\n        acc.annotatedDescription.push(annotation);\n        return acc;\n    }, {\n        annotatedDescription: [],\n        description: [],\n    });\n    return {\n        annotatedDescription: compiled.annotatedDescription,\n        description: compiled.description.join(' '),\n    };\n}\nexports.postprocessRadspecDescription = postprocessRadspecDescription;\n"},"sourceMaps":{"js":{"version":3,"file":"postprocess.js","sourceRoot":"","sources":["../../../src/utils/radspec/postprocess.ts"],"names":[],"mappings":";;;AAAA,wCAAuD;AACvD,sCAA8C;AAiB9C;;;;;GAKG;AACI,KAAK,UAAU,6BAA6B,CACjD,WAAmB,EACnB,IAAW;IAEX,MAAM,eAAe,GAAG,mBAAmB,CAAA;IAC3C,MAAM,YAAY,GAAG,IAAI,MAAM,CAAC,IAAI,eAAe,GAAG,CAAC,CAAA;IACvD,MAAM,eAAe,GAAG,gBAAgB,CAAA;IACxC,MAAM,YAAY,GAAG,IAAI,MAAM,CAAC,IAAI,eAAe,GAAG,CAAC,CAAA;IACvD,MAAM,aAAa,GAAG,IAAI,MAAM,CAC9B,OAAO,eAAe,IAAI,eAAe,MAAM,CAChD,CAAA;IAED,MAAM,MAAM,GAAG,WAAW;SACvB,KAAK,CAAC,aAAa,CAAC;SACpB,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;SAC1B,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,CAAA;IAEzB,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;QACrB,OAAO,EAAE,WAAW,EAAE,CAAA;KACvB;IAED,MAAM,KAAK,GAAW,EAAE,CAAA;IACxB,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE;QACtB,MAAM,QAAQ,GAAG,MAAM,GAAG,CAAC,KAAK,EAAE,CAAA;QAClC,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAA;KACvB;IAED,MAAM,eAAe,GAAG,CAAC,KAAa,EAAgB,EAAE;QACtD,IAAI,wBAAc,CAAC,KAAK,EAAE,oBAAU,CAAC,EAAE;YACrC,OAAO;gBACL,KAAK;gBACL,eAAe;gBACf,EAAE,IAAI,EAAE,aAAa,EAAE,KAAK,EAAE,oBAAU,EAAE;aAC3C,CAAA;SACF;QAED,MAAM,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC,wBAAc,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAA;QACtE,IAAI,GAAG,EAAE;YACP,MAAM,WAAW,GAAG,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAA;YACtE,OAAO,CAAC,KAAK,EAAE,IAAI,WAAW,GAAG,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,CAAA;SAChE;QAED,OAAO,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAA;IAC1D,CAAC,CAAA;IAED,MAAM,eAAe,GAAG,CAAC,KAAa,EAAgB,EAAE;QACtD,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,IAAI,KAAK,KAAK,CAAC,CAAA;QAErD,IAAI,IAAI,IAAI,IAAI,CAAC,IAAI,EAAE;YACrB,OAAO,CAAC,KAAK,EAAE,IAAI,IAAI,CAAC,IAAI,GAAG,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAA;SAChE;QAED,MAAM,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,KAAK,KAAK,KAAK,CAAC,CAAA;QAErD,IAAI,GAAG,EAAE;YACP,2DAA2D;YAC3D,OAAO,CAAC,KAAK,EAAE,IAAI,GAAG,CAAC,OAAO,GAAG,EAAE,EAAE,IAAI,EAAE,YAAY,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,CAAA;SACvE;QAED,MAAM,SAAS,GAAG,2BAAkB,CAAC,KAAK,CAAC,CAAA;QAC3C,IAAI,SAAS,EAAE;YACb,OAAO;gBACL,KAAK;gBACL,IAAI,SAAS,CAAC,IAAI,GAAG;gBACrB,EAAE,IAAI,EAAE,iBAAiB,EAAE,KAAK,EAAE,SAAS,EAAE;aAC9C,CAAA;SACF;QAED,OAAO,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAA;IAC1D,CAAC,CAAA;IAED,MAAM,YAAY,GAAG,CAAC,KAAa,EAAgB,EAAE;QACnD,OAAO,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAA;IACvD,CAAC,CAAA;IAED,MAAM,eAAe,GAAG,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;QACzC,IAAI,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;YAC5B,OAAO,eAAe,CAAC,KAAK,CAAC,CAAA;SAC9B;QACD,IAAI,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;YAC5B,OAAO,eAAe,CAAC,KAAK,CAAC,CAAA;SAC9B;QACD,OAAO,YAAY,CAAC,KAAK,CAAC,CAAA;IAC5B,CAAC,CAAC,CAAA;IAEF,MAAM,QAAQ,GAAmB,eAAe,CAAC,MAAM;IACrD,6DAA6D;IAC7D,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,WAAW,EAAE,UAAU,CAAC,EAAE,EAAE;QACpC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;QACjC,GAAG,CAAC,oBAAoB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;QACzC,OAAO,GAAG,CAAA;IACZ,CAAC,EACD;QACE,oBAAoB,EAAE,EAAkB;QACxC,WAAW,EAAE,EAAc;KAC5B,CACF,CAAA;IAED,OAAO;QACL,oBAAoB,EAAE,QAAQ,CAAC,oBAAoB;QACnD,WAAW,EAAE,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC;KAC5C,CAAA;AACH,CAAC;AAtGD,sEAsGC","sourcesContent":[null]}},"error":null,"hash":"35dd84ecddba9b871ef4df753b76c3f8","cacheData":{"env":{}}}